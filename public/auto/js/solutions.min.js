(function(a) {
    if (typeof define === "function" && define.amd) {
        define(["jquery"], a)
    } else {
        if (typeof exports === "object") {
            module.exports = a
        } else {
            a(jQuery)
        }
    }
}(function(e) {
    var f = ["wheel", "mousewheel", "DOMMouseScroll", "MozMousePixelScroll"],
        n = ("onwheel" in document || document.documentMode >= 9) ? ["wheel"] : ["mousewheel", "DomMouseScroll", "MozMousePixelScroll"],
        l = Array.prototype.slice,
        m, b;
    if (e.event.fixHooks) {
        for (var g = f.length; g;) {
            e.event.fixHooks[f[--g]] = e.event.mouseHooks
        }
    }
    var h = e.event.special.mousewheel = {
        version: "3.1.12",
        setup: function() {
            if (this.addEventListener) {
                for (var p = n.length; p;) {
                    this.addEventListener(n[--p], o, false)
                }
            } else {
                this.onmousewheel = o
            }
            e.data(this, "mousewheel-line-height", h.getLineHeight(this));
            e.data(this, "mousewheel-page-height", h.getPageHeight(this))
        },
        teardown: function() {
            if (this.removeEventListener) {
                for (var p = n.length; p;) {
                    this.removeEventListener(n[--p], o, false)
                }
            } else {
                this.onmousewheel = null
            }
            e.removeData(this, "mousewheel-line-height");
            e.removeData(this, "mousewheel-page-height")
        },
        getLineHeight: function(q) {
            var p = e(q),
                r = p["offsetParent" in e.fn ? "offsetParent" : "parent"]();
            if (!r.length) {
                r = e("body")
            }
            return parseInt(r.css("fontSize"), 10) || parseInt(p.css("fontSize"), 10) || 16
        },
        getPageHeight: function(p) {
            return e(p).height()
        },
        settings: {
            adjustOldDeltas: true,
            normalizeOffset: true
        }
    };
    e.fn.extend({
        mousewheel: function(p) {
            return p ? this.bind("mousewheel", p) : this.trigger("mousewheel")
        },
        unmousewheel: function(p) {
            return this.unbind("mousewheel", p)
        }
    });

    function o(p) {
        var s = p || window.event,
            y = l.call(arguments, 1),
            A = 0,
            u = 0,
            t = 0,
            x = 0,
            w = 0,
            v = 0;
        p = e.event.fix(s);
        p.type = "mousewheel";
        if ("detail" in s) {
            t = s.detail * -1
        }
        if ("wheelDelta" in s) {
            t = s.wheelDelta
        }
        if ("wheelDeltaY" in s) {
            t = s.wheelDeltaY
        }
        if ("wheelDeltaX" in s) {
            u = s.wheelDeltaX * -1
        }
        if ("axis" in s && s.axis === s.HORIZONTAL_AXIS) {
            u = t * -1;
            t = 0
        }
        A = t === 0 ? u : t;
        if ("deltaY" in s) {
            t = s.deltaY * -1;
            A = t
        }
        if ("deltaX" in s) {
            u = s.deltaX;
            if (t === 0) {
                A = u * -1
            }
        }
        if (t === 0 && u === 0) {
            return
        }
        if (s.deltaMode === 1) {
            var z = e.data(this, "mousewheel-line-height");
            A *= z;
            t *= z;
            u *= z
        } else {
            if (s.deltaMode === 2) {
                var r = e.data(this, "mousewheel-page-height");
                A *= r;
                t *= r;
                u *= r
            }
        }
        x = Math.max(Math.abs(t), Math.abs(u));
        if (!b || x < b) {
            b = x;
            if (a(s, x)) {
                b /= 40
            }
        }
        if (a(s, x)) {
            A /= 40;
            u /= 40;
            t /= 40
        }
        A = Math[A >= 1 ? "floor" : "ceil"](A / b);
        u = Math[u >= 1 ? "floor" : "ceil"](u / b);
        t = Math[t >= 1 ? "floor" : "ceil"](t / b);
        if (h.settings.normalizeOffset && this.getBoundingClientRect) {
            var q = this.getBoundingClientRect();
            w = p.clientX - q.left;
            v = p.clientY - q.top
        }
        p.deltaX = u;
        p.deltaY = t;
        p.deltaFactor = b;
        p.offsetX = w;
        p.offsetY = v;
        p.deltaMode = 0;
        y.unshift(p, A, u, t);
        if (m) {
            clearTimeout(m)
        }
        m = setTimeout(j, 200);
        return (e.event.dispatch || e.event.handle).apply(this, y)
    }

    function j() {
        b = null
    }

    function a(q, p) {
        return h.settings.adjustOldDeltas && q.type === "mousewheel" && p % 120 === 0
    }
}));
var Symbolab = function(a, b, e) {
    this.params = new Object();
    this.params.userId = a;
    this.params.query = b;
    this.params.language = e;
    this.init()
};
Symbolab.prototype = {
    init: function() {
        parseQueryParameters(this.params);
        var a = this;
        $(".topnav ul li a").click(function(b) {})
    },
    queryString: function(f) {
        if (f == undefined) {
            f = {}
        }
        f = $.extend({}, this.params, f);
        var a = [];
        for (var b in f) {
            var e = f[b];
            if (e != "") {
                a.push((b) + "=" + encodeURIComponent(e))
            }
        }
        return a.join("&")
    },
    params: {},
    results: {},
    forwardSearch: function(a, e) {
        if (a !== "") {
            var b = "/solver/";
            if (typeof SOLUTIONS != "undefined" && SOLUTIONS.page !== "") {
                b += SOLUTIONS.page + "/"
            } else {
                b += "step-by-step/"
            }
            b += encodeURIComponent(a);
            if (e) {
                b += "?or=" + e
            }
            window.location = b
        }
    }
};
Symbolab.prototype.updateSolutionsUrl = function() {
    $("#solutionsTopNav a").attr("href", "/solver/step-by-step/" + encodeURIComponent(this.params.query))
};
Symbolab.prototype.getTextLenScore = function(b) {
    var a = parseInt(b.textlen) + parseInt(b.eqlen);
    var e = a / 100000;
    return e
};
Symbolab.prototype.logRedirect = function(f, l, j, b) {
    var a = this;
    var h = {
        userId: a.params.userId,
        language: a.params.language,
        type: f,
        info1: l,
        info2: j,
        redirect: b
    };
    $("body").append($("<form/>", {
        id: "redirectPostForm",
        method: "POST",
        action: "/logRedirect"
    }));
    var g = $("#redirectPostForm");
    for (var e in h) {
        g.append($("<input/>", {
            type: "hidden",
            name: e,
            value: h[e]
        }))
    }
    g.submit()
};
Symbolab.prototype.showPopover = function(b, e, a) {
    var f = this;
    b.popover({
        title: e,
        content: a,
        placement: "top",
        delay: {
            show: 500,
            hide: 5000
        }
    }).popover("show");
    setInterval(function() {
        f.inputBox().popover("disable");
        f.inputBox().popover("hide")
    }, 4000)
};
Symbolab.prototype.lastInsertedIsEquals = function() {
    var b = this;
    var a = b.inputValue("latex");
    if (a.indexOf("=") == a.length - 1) {
        return 1
    } else {
        return 0
    }
};
Symbolab.prototype.updateCalculation = function() {
    var b = this;
    var a = b.inputValue("latex");
    if (!b.calcmode) {
        b.calcmode = "rad"
    }
    if (a.indexOf("=") >= 0) {
        a = a.split("=")[0]
    }
    SYPAD.inputBox().mathquill("latex", a + " = ");
    $.ajax({
        type: "GET",
        url: Symbolab.paths.calculate,
        data: {
            query: a,
            radDeg: b.calcmode
        },
        error: function(e) {
            b.showPopover(b.inputBox(), "Calculation Error", "We ran into a problem calculating that. Try searching instead.")
        },
        success: function(e) {
            if (e.response != undefined && e.response != "NA") {
                b.appendInput(e.response)
            } else {
                b.showPopover(b.inputBox(), "Calculation Error", "We ran into a problem calculating that. Try searching instead.")
            }
        }
    })
};
Symbolab.prototype.executeSearch = function() {
    var b = this.params.query;
    if (b == "") {
        return
    }
    b = b.replace(/\\(text|mbox)\s*{(.+?)}/g, "$2 ");
    b = b.replace(/\\:/g, " ");
    b = b.replace(/\\left\\s*\(/g, "(");
    b = b.replace(/\\right\\s*\)/g, ")");
    var a = b;
    this.params.query = b;
    if (b == "") {
        this.promptError("Cannot understand this query, please try a different query.");
        this.inputBox().mathquill("latex", prepareQueryForMathQuill(a));
        return
    }
    if (this.currentPage() == 0 || this.currentPage() > 100) {
        this.promptError("Allowed page numbers are 1-100.");
        return
    }
    this.inputBox().mathquill("latex", prepareQueryForMathQuill(b));
    $(".print-only .search-query").mathquill("latex", b);
    this.updateSolutionsUrl();
    this.updateResults();
    // if (!this.isScholar) {
    //     this.updateStepsPlot()
    // }
};
Symbolab.prototype.promptError = function(a) {
    var b = this;
    b.clearResults();
    document.title = "Error - Symbolab Results";
    $("#ShareButtonsSection").prepend("<span class='errorMsg'>" + a + "</span>");
    $("#Refinements .scholar-refinements, #Refinements .web-refinements").hide();
    $("#Codepad .actions").hide();
    return
};
Symbolab.convert2html = function(a) {
    a = a.replace(/</g, "&lt;");
    a = a.replace(/>/g, "&gt;");
    return a
};

function url_domain(e) {
    var b = document.createElement("a");
    b.href = e;
    return b.hostname
}

function htmlDecode(a) {
    if (a == "") {
        return a
    }
    var b = document.createElement("div");
    b.innerHTML = a;
    return b.childNodes[0].nodeValue
}
Symbolab_toolbar_functions = {
    Basic: {
        prepend: function(b, a) {
            SYPAD.prependInput(a.data("prepend"), a.data("moveleft"))
        },
        append: function(b, a) {
            SYPAD.appendInput(a.data("append"), a.data("moveleft"))
        },
        clear: function() {
            SYPAD.inputBox(false).mathquill("latex", "")
        }
    },
    Calc: {
        mode: function(b, a) {
            if (SYPAD.calcmode == undefined) {
                SYPAD.calcmode = "rad"
            }
            if ("deg" == symbolab.calcmode) {
                a.addClass("radmode");
                SYPAD.calcmode = "rad"
            } else {
                a.removeClass("radmode");
                SYPAD.calcmode = "deg"
            }
        },
        calculate: function(b, a) {
            SYPAD.updateCalculation()
        },
        "x!": function(b, a) {
            SYPAD.appendInput("!")
        }
    }
};
var SymbolabPad = function(g, f, a, e) {
    var b = null;
    this.language = g;
    this.customInputboxSelector = f;
    this.allowsSearching = a;
    if (e === undefined) {
        e = false
    }
    this.triggerOnKeyUpEvents = e;
    this.periodicTable = [
        ["H", , , , "\\Rightarrow", "O_{\\msquare}", , , , , , , , , , , , "He"],
        ["Li", "Be", , , , , , , , , , , "B", "C", "N", "O", "F", "Ne"],
        ["Na", "Mg", , , , , , , , , , , "Al", "Si", "P", "S", "Cl", "Ar"],
        ["K", "Ca", "Sc", "Ti", "V", "Cr", "Mn", "Fe", "Co", "Ni", "Cu", "Zn", "Ga", "Ge", "As", "Se", "Br", "Kr"],
        ["Rb", "Sr", "Y", "Zr", "Nb", "Mo", "Tc", "Ru", "Rh", "Pd", "Ag", "Cd", "In", "Sn", "Sb", "Te", "I", "Xe"],
        ["Cs", "Ba", , "Hf", "Ta", "W", "Re", "Os", "Ir", "Pt", "Au", "Hg", "Tl", "Pb", "Bi", "Po", "At", "Rn"],
        ["Fr", "Ra", , "Rf", "Db", "Sg", "Bh", "Hs", "Mt", "Ds", "Rg", "Cn", "Uut", "Fl", "Uup", "Lv", "Uus", "Uuo"],
        [, , , , , , , , , , , , , , , , ],
        [, , "La", "Ce", "Pr", "Nd", "Pm", "Sm", "Eu", "Gd", "Tb", "Dy", "Ho", "Er", "Tm", "Yb", "Lu"],
        [, , "Ac", "Th", "Pa", "U", "Np", "Pu", "Am", "Cm", "Bk", "Cf", "Es", "Fm", "Md", "No", "Lr"]
    ];
    this.elementNames = {
        "\\Rightarrow": "Right arrow",
        "O_{\\msquare}": "Underscore",
        H: "Hydrogen",
        He: "Helium",
        Li: "Lithium",
        Be: "Beryllium",
        B: "Boron",
        C: "Carbon",
        N: "Nitrogen",
        O: "Oxygen",
        F: "Fluorine",
        Ne: "Neon",
        Na: "Sodium",
        Mg: "Magnesium",
        Al: "Aluminum",
        Si: "Silicon",
        P: "Phosphorus",
        S: "Sulfur",
        Cl: "Chlorine",
        Ar: "Argon",
        K: "Potassium",
        Ca: "Calcium",
        Sc: "Scandium",
        Ti: "Titanium",
        V: "Vanadium",
        Cr: "Chromium",
        Mn: "Manganese",
        Fe: "Iron",
        Co: "Cobalt",
        Ni: "Nickel",
        Cu: "Copper",
        Zn: "Zinc",
        Ga: "Gallium",
        Ge: "Germanium",
        As: "Arsenic",
        Se: "Selenium",
        Br: "Bromine",
        Kr: "Krypton",
        Rb: "Rubidium",
        Sr: "Strontium",
        Y: "Yttrium",
        Zr: "Zirconium",
        Nb: "Niobium",
        Mo: "Molybdenum",
        Tc: "Technetium",
        Ru: "Ruthenium",
        Rh: "Rhodium",
        Pd: "Palladium",
        Ag: "Silver",
        Cd: "Cadmium",
        In: "Indium",
        Sn: "Tin",
        Sb: "Antimony",
        Te: "Tellurium",
        I: "Iodine",
        Xe: "Xenon",
        Cs: "Caesium",
        Ba: "Barium",
        Hf: "Hafnium",
        Ta: "Tantalum",
        W: "Tungsten",
        Re: "Rhenium",
        Os: "Osmium",
        Ir: "Iridium",
        Pt: "Platinum",
        Au: "Gold",
        Hg: "Mercury",
        Tl: "Thallium",
        Pb: "Lead",
        Bi: "Bismuth",
        Po: "Polonium",
        At: "Astatine",
        Rn: "Radon",
        Fr: "Francium",
        Ra: "Radium",
        Rf: "Rutherfordium",
        Db: "Dubnium",
        Sg: "Seaborgium",
        Bh: "Bohrium",
        Hs: "Hassium",
        Mt: "Meitnerium",
        Ds: "Darmstadtium",
        Rg: "Roentgenium",
        Cn: "Copernicium",
        Uut: "Ununtrium",
        Fl: "Flerovium",
        Uup: "Ununpentium",
        Lv: "Livermorium",
        Uus: "Ununseptium",
        Uuo: "Ununoctium",
        La: "Lanthanum",
        Ce: "Cerium",
        Pr: "Praseodymium",
        Nd: "Neodymium",
        Pm: "Promethium",
        Sm: "Samarium",
        Eu: "Europium",
        Gd: "Gadolinium",
        Tb: "Terbium",
        Dy: "Dysprosium",
        Ho: "Holmium",
        Er: "Erbium",
        Tm: "Thulium",
        Yb: "Ytterbium",
        Lu: "Lutetium",
        Ac: "Actinium",
        Th: "Thorium",
        Pa: "Protactinium",
        U: "Uranium",
        Np: "Neptunium",
        Pu: "Plutonium",
        Am: "Americium",
        Cm: "Curium",
        Bk: "Berkelium",
        Cf: "Californium",
        Es: "Einsteinium",
        Fm: "Fermium",
        Md: "Mendelevium",
        No: "Nobelium",
        Lr: "Lawrencium"
    };
    this.init()
};
SymbolabPad.prototype = {
    init: function() {
        var a = this;
        $("body").click(function(b) {
            a.selectChild("#CodePadSuggestions").hide();
            $("#tsUl").hide()
        });
        this.selectChild("button.search").click(function(b) {
            a.initateSearch()
        });
        $("#main-input").keyup(function(e) {
            var b = (e.charCode) ? e.charCode : e.keyCode;
            if (e.keyCode == 13) {
                a.initateSearch()
            }
        });
        this.selectChild('[class^="pad-toolbar-"]').click(function(f) {
            a.switchPad($(this));
            var b = $(this).attr("class").split(" ")[0];
            var e = b.split("-")[2].capitalize();
            symbolab_log("Pad", "KeyboardType", e)
        });
        this.selectChild(".pad-button-matrix c").click(function(g) {
            var e = $(this);
            var h = e.mathquill("latex");
            h = h.replace("\\left(", "");
            h = h.replace("\\right)", "");
            var b = h.split("\\times");
            var f = createMatrixLatex(b[0], b[1]);
            a.inputBox(false).mathquill("write", f, b[0] * b[1]);
            a.inputBox(false).focus();
            symbolab_log("Pad", "Matrix", "matrix:" + h);
            return false
        });
        this.selectChild(".padButton").each(function(h, f) {
            var b = $(f);
            var g = b.attr("title");
            if (g === undefined || g === null || g === "") {
                b.attr("title", b.data("append"))
            }
        });
        this.selectChild(".equalsBtn").click(function() {
            a.initateSearch()
        });
        this.selectChild(".radBtn").click(function() {
            $(".radBtn").addClass("active");
            $(".degBtn").removeClass("active")
        });
        this.selectChild(".degBtn").click(function() {
            $(".radBtn").removeClass("active");
            $(".degBtn").addClass("active")
        });
        this.selectChild(".clearBtn").click(function() {
            a.replaceInput("")
        });
        $("body").on("click", ".padButton:not(.disabled)", function(b) {
            a.padButtonClick(this)
        });
        $("#toggle_mini_keypad").click(function() {
            if (!$("#mini_codepad").is(":visible")) {
                $("#toggle_mini_keypad img.open").fadeOut("fast", function() {
                    $("#mini_codepad").slideDown(function() {
                        $("#toggle_mini_keypad img.close").fadeIn("fast")
                    })
                });
                symbolab_log("Pad", "CompactPad", "Expand")
            } else {
                $("#toggle_mini_keypad img.close").fadeOut("fast", function() {
                    $("#mini_codepad").slideUp(function() {
                        $("#toggle_mini_keypad img.open").fadeIn("fast")
                    })
                });
                symbolab_log("Pad", "CompactPad", "Contract")
            }
        });
        a.sortSelect($("select#most_used_dropdown"));
        $("select#most_used_dropdown").change(function(f) {
            var b = $(this).find("option:selected");
            a.padButtonClick(b);
            $("select#most_used_dropdown").val(0)
        })
    },
    sortSelect: function(e) {
        var b = e.val();
        var a = e.find("option").sort(function(g, f) {
            if (g.index == 0) {
                return -1
            }
            if (f.index == 0) {
                return 1
            }
            return g.text.localeCompare(f.text, this.language, {
                sensitivity: "base"
            })
        });
        e.html(a).val(b)
    },
    appendButtonAndGetLogInfo: function(a) {
        var b = $(a);
        var f = b.parents("table:first");
        var g = b.data("function");
        var e = f.attr("id"),
            h;
        if (b.data("clear")) {
            Symbolab_toolbar_functions.Basic.clear()
        }
        if (typeof(g) != "undefined") {
            h = g;
            Symbolab_toolbar_functions[e][g](symbolab, f, b)
        } else {
            if (typeof(b.data("append")) != "undefined") {
                h = b.data("append");
                Symbolab_toolbar_functions.Basic.append(f, b)
            } else {
                if (typeof(b.data("prepend")) != "undefined") {
                    h = b.data("prepend");
                    Symbolab_toolbar_functions.Basic.prepend(f, b)
                } else {
                    if ($("#chemistryTable").is(":visible")) {
                        h = "Chemistry"
                    } else {
                        if ($(".matrixTable").is(":visible")) {
                            h = "Matrix"
                        } else {
                            h = b.attr("id")
                        }
                    }
                }
            }
        }
        return [h, e]
    },
    padButtonClick: function(a) {
        var g = this;
        var e = g.appendButtonAndGetLogInfo(a);
        var f = e[0];
        var b = e[1];
        if (window.location.pathname != "/") {
            symbolab_log("Pad", b, f)
        } else {
            symbolab_log("MainPagePad", b, f)
        }
        g.inputBox(false).focus();
        return false
    },
    switchPad: function(f) {
        var b = f;
        var a = b.attr("class").split(" ")[0];
        var e = a.split("-")[2].capitalize();
        var g = SYPAD.selectChild("#" + e);
        SYPAD.selectChild("table.buttons:not(.nohide)").hide();
        if (e == "Chemistry" || e == "Calculator") {
            SYPAD.selectChild("#Common.buttons").hide()
        } else {
            SYPAD.selectChild("#Common.buttons").show()
        }
        g.show();
        SYPAD.selectChild('[class^="pad-toolbar-"]').removeClass("active");
        b.addClass("active");
        SYPAD.currentToolbar = e;
        SYPAD.showAllButtons();
        $(".button-container .mathquill-embedded-latex").mathquill("redraw")
    },
    inputValue: function(b) {
        var a = this.inputBox(b).mathquill("latex");
        return this.cleanSearchPhrase(a)
    },
    cleanSearchPhrase: function(a) {
        if (a != undefined) {
            a = a.replace(/\\:/g, " ");
            a = a.replace(/(\^\{(.*?)\}|\^(.))/g, "^{$2$3}");
            a = a.replace(/(_\{(.*?)\}|_(.))/g, "_{$2$3}")
        }
        return a
    },
    initateSearch: function() {
        if (this.searching) {
            return
        }
        if (this.allowsSearching !== undefined && !this.allowsSearching) {
            return
        }
        var a = this.inputValue(true);
        if (a == "") {
            return
        }
        if ($("table#Calculator").is(":visible")) {
            this.searching = true;
            var b = $(".radBtn").hasClass("active");
            $.ajax({
                type: "GET",
                url: "/calculate",
                data: {
                    query: SYPAD.inputValue(),
                    isRad: b
                },
                success: function(e) {
                    SYPAD.replaceInput(e.response)
                },
                complete: function() {
                    this.searching = false
                }
            })
        } else {
            SYMBOLAB.forwardSearch(a, "input")
        }
    },
    appendInput: function(e, a) {
        if (typeof(e) == "undefined") {
            return
        }
        if (typeof(a) == "undefined") {
            a = 0
        }
        var b = this.inputBox(false).focus();
        b.mathquill("write", e + "", a).focus();
        if (typeof(SYSUGGEST) != "undefined" && SYSUGGEST != undefined && $("table#Calculator").is(":visible") == false) {
            SYSUGGEST.updateSuggestions(this.inputValue())
        }
        if (typeof(SYGRAPH) != "undefined" && SYGRAPH) {
            SYGRAPH.updateGraphInputOverflow(b, true);
            SYGRAPH.getJsonAndDraw();
            SYGRAPH.unchangedSinceLoad = false
        }
        if (this.triggerOnKeyUpEvents) {
            $(b).keyup()
        }
    },
    replaceInput: function(b) {
        var a = prepareQueryForMathQuill(b);
        this.inputBox(false).mathquill("latex", a)
    },
    selectChild: function(a) {
        return $(a)
    },
    showCommonButtons: function() {
        this.selectChild(".codepadbody .buttons:not(.hide) tr").hide();
        this.selectChild(".codepadbody .buttons:not(.hide) tr:first").show();
        this.selectChild("#Basic").hide()
    },
    showAllButtons: function() {
        this.selectChild(".codepadbody .buttons:not(.hide) tr").show()
    },
    inputBox: function(b) {
        if (this.customInputboxSelector !== undefined && $(this.customInputboxSelector).is(":visible")) {
            return $(this.customInputboxSelector)
        }
        if (b) {
            var a = $("#main-input");
            return a
        }
        if (this.activeInputBox != null) {
            return this.activeInputBox
        }
        return this.selectChild(".mathquill-editable:first")
    },
    inputBoxIndex: function() {
        var b = this;
        var e = b.inputBox(false);
        var a = $(".graph-input").index(e);
        return a
    },
    createChemistryPad: function(b) {
        var g = this;
        var l = $(b);
        if (l.is(":empty")) {
            var a = "<tbody>";
            for (var h = 0; h < this.periodicTable.length; h++) {
                a += "<tr>";
                var e = this.periodicTable[h];
                for (var f = 0; f < e.length; f++) {
                    if (e[f]) {
                        a += "<td class='atomInTable' title='" + g.elementNames[e[f]] + "'><span class='mathquill-embedded-latex'>\\mathrm{" + e[f] + "}</span></td>"
                    } else {
                        a += "<td class='noAtomInTable'></td>"
                    }
                }
                a += "</tr>"
            }
            a += "</tbody>";
            l.append(a);
            l.find(".mathquill-embedded-latex").mathquill();
            $(".atomInTable").click(function() {
                var m = $(this);
                var n = m.find(".mathquill-embedded-latex").mathquill("latex");
                var j = 0;
                if (n.indexOf("_") > 0) {
                    n = "_";
                    j = 1
                } else {
                    n = n.replace("\\mathrm{", "");
                    n = n.replace("}", "")
                }
                g.inputBox(false).mathquill("write", n, j);
                g.inputBox(false).focus();
                symbolab_log("Pad", "Chemistry", n)
            })
        }
        $(".solution-codepad-header span").html("« " + i18n("compact pad"));
        $("#Compact").hide();
        l.show();
        l.find(".mathquill-embedded-latex").mathquill("redraw")
    },
    createCalculatorPad: function(b) {
        var g = this;
        var l = $(b);
        if (l.is(":empty")) {
            var a = "<tbody>";
            for (var h = 0; h < this.periodicTable.length; h++) {
                a += "<tr>";
                var e = this.periodicTable[h];
                for (var f = 0; f < e.length; f++) {
                    if (e[f]) {
                        a += "<td class='atomInTable' title='" + g.elementNames[e[f]] + "'><span class='mathquill-embedded-latex'>\\mathrm{" + e[f] + "}</span></td>"
                    } else {
                        a += "<td class='noAtomInTable'></td>"
                    }
                }
                a += "</tr>"
            }
            a += "</tbody>";
            l.append(a);
            l.find(".mathquill-embedded-latex").mathquill();
            $(".atomInTable").click(function() {
                var m = $(this);
                var n = m.find(".mathquill-embedded-latex").mathquill("latex");
                var j = 0;
                if (n.indexOf("_") > 0) {
                    n = "_";
                    j = 1
                } else {
                    n = n.replace("\\mathrm{", "");
                    n = n.replace("}", "")
                }
                g.inputBox(false).mathquill("write", n, j);
                g.inputBox(false).focus();
                symbolab_log("Pad", "Chemistry", n)
            })
        }
        $(".solution-codepad-header span").html("« " + i18n("compact pad"));
        $("#Compact").hide();
        l.show();
        l.find(".mathquill-embedded-latex").mathquill("redraw")
    }
};
var StructuredGeometry = function(a) {
    this.query = a;
    this.supported = false;
    this.parsedObject = {};
    this.parse()
};
StructuredGeometry.prototype = {
    parse: function() {
        var b = this;
        var g = /^(equilateral triangle|square|circle), find (perimeter|area given side|area|circumference), given (.+?)$/i;
        var a = b.query.match(g);
        if (a) {
            var f = a[3].split(",");
            var e = {};
            f.forEach(function(h) {
                var j = h.split("=");
                e[j[0]] = j[1]
            });
            b.parsedObject = {
                entity: a[1],
                find: a[2],
                givens: e
            };
            b.supported = true
        }
    },
    shouldGenerateLinkForQuery: function() {
        var a = this;
        return a.supported
    }
};
var SymbolabSteps = function(f, b, a, e) {
    this.requestLang = f;
    this.stepsRes = null;
    this.stepsArray = [];
    this.stepsHighestBox = [];
    this.stepsArrayIndex = 0;
    this.referer = e;
    this.subscribed = b === "true";
    this.NotebookSourceSolutions = a ? a : "Solutions";
    this.showHideMap = new Object();
    this.showHideMap.hideSteps = i18n("hide steps");
    this.showHideMap.showSteps = i18n("show steps");
    this.showHideMap.stepByStep = i18n("Step by Step");
    this.showHideMap.showAllSteps = i18n("js.Expand Steps");
    this.showStepsText = i18n("show steps");
    this.init()
};
SymbolabSteps.prototype = {
    init: function() {
        var b = this;
        var a = $("body");
        a.on("click", ".newSelect", function(e) {
            $(this).toggleClass("closed");
            if (!$(this).hasClass("closed")) {
                if ($(this).hasClass("stepsSelect")) {
                    symbolab_log("Registration", "ClickedFeature", "Solver\tDropdown")
                } else {
                    symbolab_log("Registration", "ClickedFeature", "Solver\tSolvingOptions")
                }
            }
            $(this).children(".slItems").toggle();
            e.preventDefault();
            return false
        });
        a.on("click", ".solution_title_container_highest", function(f) {
            f.preventDefault();
            if (b.isGeometryPage()) {
                return
            }
            var e = $(this);
            if (e.find(".lockedSteps-div").size() > 0) {
                var g = "Solver\tTopLockedStep\t" + b.stepsRes.topic + "\t" + b.stepsRes.subTopic;
                showSignUpSubscribe(g)
            } else {
                b.openHideSolutionTitleContainerHighest(e)
            }
        });
        a.on("click", "#multipleOptions .slItem", function(g) {
            var f = $(this).attr("value");
            var e = $(this).parent().parent();
            var h = "Solver\tSolvingOptions";
            if (e.children(".value").attr("value") === f) {
                return
            } else {
                symbolab_log("Registration", "ClickedFeature", h + "\tChange", b.stepsRes.query)
            }
            if (b.subscribed) {
                SYMBOLAB.params.query = f;
                // b.updateStepsPlot(true)
            } else {
                showSignUpSubscribe(h)
            }
        });
        a.on("click", ".stepsSelect .slItem", function(g) {
            var f = $(this).attr("value");
            var e = $(this).parent().parent();
            if (e.children(".value").attr("value") === f) {
                return
            }
            if (b.inStepByStep) {
                b.inStepByStep = false;
                b.writeSteps(b.stepsRes);
                b.doDynamicPlot(true);
                if (f === "showSteps") {
                    b.openHideStepsNew($(".show-hide-steps-div").parent(), true);
                    b.showVerify();
                    symbolab_log("Registration", "ClickedFeature", "Solver\tDropdown\tShowSteps")
                } else {
                    if (f === "showAllSteps") {
                        b.doShowAllSteps();
                        symbolab_log("Registration", "ClickedFeature", "Solver\tDropdown\tShowAllSteps")
                    } else {
                        symbolab_log("Registration", "ClickedFeature", "Solver\tDropdown\tHideSteps")
                    }
                }
                return
            }
            if (f === "showSteps") {
                b.openHideStepsNew(e.parent().parent(), true);
                symbolab_log("Registration", "ClickedFeature", "Solver\tDropdown\tShowSteps")
            } else {
                if (f === "showAllSteps") {
                    var h = "Solver\tDropdown\tShowAllSteps";
                    if (b.subscribed) {
                        symbolab_log("Registration", "ClickedFeature", h, b.stepsRes.query);
                        b.doShowAllSteps()
                    } else {
                        showSignUpSubscribe(h)
                    }
                } else {
                    if (f === "hideSteps") {
                        symbolab_log("Registration", "ClickedFeature", "Solver\tDropdown\tHideSteps");
                        b.openHideStepsNew(e.parent().parent(), false)
                    } else {
                        var h = "Solver\tDropdown\tStepByStep";
                        if (b.subscribed) {
                            symbolab_log("Registration", "ClickedFeature", h, b.stepsRes.query);
                            b.makeStepByStepSolution()
                        } else {
                            showSignUpSubscribe(h)
                        }
                    }
                }
            }
            g.preventDefault()
        })
    },
    openHideSolutionTitleContainerHighest: function(b) {
        var a = this;
        if (!b.attr("onclick") && a.stepsRes) {
            a.openHideStepsNew(b, false === b.next().is(":visible"))
        }
    },
    doShowAllSteps: function() {
        _.dontFireOpenInnerEvent = true;
        if ($(".solution_step_list:visible").size() === 0) {
            _.openHideStepsNew($(".show-hide-steps-div").parent(), true)
        }
        var a = true;
        while (a) {
            a = false;
            $(".showStepsButton").each(function() {
                SYSTEPS.showHideRule($(this).parent().parent());
                a = true
            })
        }
        $(".stepsSelect .value").attr("value", "showAllSteps");
        $(".stepsSelect .value").text(_.showHideMap.showAllSteps);
        _.dontFireOpenInnerEvent = false
    },
    setStepsFromMobileResponse: function(b) {
        var a = this;
        a.stepsRes = b;
        createSteps(b);
        a.doDynamicPlot(false);
        changePlotToImage();
        removeShowStepsWhereApplicable(b);
        a.setSavedNote($(".nl-questionFavorite"), "nl-questionFavoriteSaved")
    },
    // getStepsMobile: function(e, a) {
    //     var b = this;
    //     var f = {
    //         type: "GET",
    //         url: "/pub_api/steps",
    //         beforeSend: authorizeAjaxWithSyPubToken,
    //         data: {
    //             userId: "fe",
    //             query: query,
    //             license: license,
    //             origin: a
    //         },
    //         error: function(g) {
    //             showConnectionError();
    //             hideOverlay();
    //             pageExpired(g, "api_steps")
    //         },
    //         success: function(g) {
    //             if (g) {
    //                 b.setStepsFromMobileResponse(g)
    //             } else {
    //                 showConnectionError();
    //                 b.setSavedNote($(".nl-questionFavorite"), "nl-questionFavoriteSaved")
    //             }
    //             hideOverlay()
    //         }
    //     };
    //     if (e) {
    //         f.async = true;
    //         f.timeout = 30000
    //     } else {
    //         f.async = false
    //     }
    //     $.ajax(f)
    // },
    // updateStepsPlot: function(e, b) {
    //     var a = this;
    //     $(".pdfIcon, .printIcon").addClass("nl-disabled");
    //     $.ajax({
    //         type: "GET",
    //         url: "/pub_api/steps",
    //         beforeSend: authorizeAjaxWithSyPubToken,
    //         data: {
    //             subscribed: a.subscribed,
    //             origin: SYMBOLAB.params.or,
    //             language: a.requestLang,
    //             query: SYMBOLAB.params.query,
    //             choices: SYMBOLAB.params.choices,
    //             referer: a.referer,
    //             plotRequest: "PlotOptional",
    //             page: b
    //         },
    //         error: function(f) {
    //             pageExpired(f, "api_steps")
    //         },
    //         success: function(j) {
    //             a.stepsRes = j;
    //             $("#steps-loading").hide();
    //             var h = $("#hide-container-for-page");
    //             if (h.size() > 0) {
    //                 h.removeClass("hide-important");
    //                 h.find("span.mathquill-rendered-math").mathquill("redraw")
    //             }
    //             if (isMobileRender()) {
    //                 $(".googleAdsenseMiddle #ad-hide").hide()
    //             }
    //             a.writeSteps(a.stepsRes);
    //             a.writeChAnswer(a.stepsRes);
    //             if (a.isSolutionPage()) {
    //                 var g = $(".show-hide-steps-div");
    //                 if (g.length === 1) {
    //                     if (a.inStepByStep) {
    //                         a.makeStepByStepSolution()
    //                     } else {
    //                         if (localStorage.getItem("settings.steps") == null || localStorage.getItem("settings.steps") === "showSteps") {
    //                             $(".show-hide-steps-div select").val("showSteps");
    //                             a.openHideStepsNew($(".show-hide-steps-div").parent(), true);
    //                             a.showVerify()
    //                         } else {
    //                             if (localStorage.getItem("settings.steps") === "stepByStep") {
    //                                 a.makeStepByStepSolution()
    //                             }
    //                         }
    //                     }
    //                 }
    //                 if ($(".structuredWhat:visible").size() > 0) {
    //                     $("#multipleSolutions").get(0).scrollIntoView({
    //                         behavior: "smooth",
    //                         block: "center",
    //                         inline: "end"
    //                     })
    //                 }
    //                 if (!e && !a.inStepByStep) {
    //                     a.doDynamicPlot(true)
    //                 }
    //                 a.addNotesDiv();
    //                 a.doSimilarProblem();
    //                 refreshLeftNavbarHeight()
    //             } else {
    //                 if (isMobileRender()) {
    //                     var l = $(".solution_outside_box > .solution_title_container_highest > .show-hide-steps-div .show-hide-steps");
    //                     if (l.length === 1) {
    //                         var f = l.parent().parent();
    //                         a.openHiddenSteps(f, false);
    //                         a.doDynamicPlot(true)
    //                     }
    //                 } else {
    //                     if (isPopularSearch()) {
    //                         if ($(".show-hide-steps:visible").size() == 1) {
    //                             $(".show-hide-steps:visible").click()
    //                         }
    //                         if (!e && !a.inStepByStep) {
    //                             a.doDynamicPlot(true)
    //                         }
    //                     }
    //                 }
    //             }
    //             a.setSavedNote($(".nl-notesFav"), "nl-notesFavSaved");
    //             $(".pdfIcon, .printIcon").removeClass("nl-disabled")
    //         }
    //     })
    // },
    writeChAnswer: function(E) {
        return;
        var D = this;
        if (E.externalSolution != null) {
            var B = new RegExp("</?formula.*?>", "g");
            var o = new RegExp("(^|</?formula.*?>)(.*?)(</?formula.*?>|$)", "g");
            var z = new RegExp("</?p>", "g");
            var A = D.parseExternalSolution(E);
            var w = A.steps;
            if (w.length === 0 || (w.length === 1 && w[0] === "")) {
                this.showCannotSolve();
                return
            }
            var n = $("#multipleSolutions");
            var x = $("<div></div>");
            var y = $('<div class="solution_div"></div>');
            var e = $('<div class="solution_box solution_outside_box"></div>');
            var u = $('<div onClick class="solution_title_container_highest"></div>');
            var l = $('<div class="solution_step_title"></div>');
            var t = A.solution;
            if (A.query.startsWith("\\lim") && (t.indexOf("does not exist") >= 0)) {
                t = "Diverges."
            }
            if (E.standardQuery.startsWith("prove") || t.replaceAll("<p> </p>", "").indexOf(w[0]) >= 0) {
                t = "True "
            }
            if (t.match("^<img[^<>]*>$")) {
                w.push(t);
                t = "See image in steps."
            }
            t = D.getLastSolutionLine(t);
            t = t.replaceAll(o, D.processSolutionTitleText);
            var g = A.query.indexOf("=") >= 0 ? " \\quad:\\quad " : " = ";
            var m = "###" + A.query + g + t + "###";
            m = m.replaceAll(z, "").replaceAll(B, "\\space ");
            l.append(m);
            renderMathInElement(l[0], {
                delimiters: [{
                    left: "###",
                    right: "###",
                    display: true
                }]
            });
            if (l[0].innerText.indexOf("###") >= 0) {
                this.showCannotSolve();
                return
            }
            var v = $('<div style="display: block;"></div>');
            var r = $('<ul id="steps-container" class="solution_step_list"></ul>');
            r.append('<li class="solution_step_list_itemc solution_steps_text">Steps</li>');
            if (A.steps.length > 0) {
                var j = A.steps[0];
                var s = $('<li class="solution_step_list_item"></li>');
                s.append(D.createSolutionStepBook(j, B));
                r.append(s)
            }
            if (A.steps.length > 1) {
                if (this.subscribed) {
                    var b = A.steps.slice(1);
                    for (var q in b) {
                        var j = b[q];
                        var s = $('<li class="solution_step_list_item"></li>');
                        s.append(D.createSolutionStepBook(j, B));
                        r.append('<hr class="stepsHr">');
                        r.append(s)
                    }
                } else {
                    var s = $('<li class="solution_step_list_item"></li>');
                    var p = $('<div class="solution_box solution_inside_box""></div>');
                    var f = $('<div onclick="SYSTEPS.showHideRule(this)" class="solution_title_container"></div>');
                    var C = $("<a></a>");
                    C.append($("<span class='locked-step'/>"));
                    C.append($("<span class='showButtonText'>Show Steps</span>"));
                    var h = $('<div class="solution_step_title">More steps</div>');
                    f.append(C);
                    f.append(h);
                    p.append(f);
                    s.append(p);
                    r.append('<hr class="stepsHr">');
                    r.append(s)
                }
            }
            u.append(l);
            e.append(u);
            v.append(r);
            e.append(v);
            y.append(e);
            x.append(y);
            x.find("img").attr("onerror", "bookImageError(this)");
            n.append(x.html())
        }
    },
    getLastSolutionLine: function(a) {
        a = a.replaceAll("<p> </p>", "");
        if (a.indexOf("<p>") >= 0) {
            a = a.substr(a.lastIndexOf("<p>"))
        }
        if (a.indexOf("\\begin{aligned}") >= 0 && a.match("&\\s*=")) {
            a = a.replace(/\\begin\{aligned\}(.*)\\end\{aligned\}/, function(e, b) {
                return b.split("\\\\").pop().replaceAll("&", "")
            })
        }
        return a
    },
    processSolutionTitleText: function(b) {
        var a = new RegExp("<img.*?>", "g");
        return b.replaceAll(" ", " \\space ").replaceAll(a, "")
    },
    createSolutionStepBook: function(a, b) {
        let stepText = $('<div class="solution_step_book"></div>');
        stepText.append(a.replaceAll(b, "###"));
        renderMathInElement(stepText[0], {
            delimiters: [{
                left: "###",
                right: "###",
                display: false
            }]
        });
        return stepText
    },
    parseExternalSolution: function(g) {
        var j = new RegExp("\\\\(sech|csch|arcsech?|arccsch?|arcsinh|arccosh|arctanh|arccoth)", "g");
        let parsedSolution = new Object();
        parsedSolution.query = g.externalSolution.renamedQuery.replaceAll(j, "\\mathrm{$1}");
        parsedSolution.solution = "";
        parsedSolution.steps = [];
        let answerObj = JSON.parse(g.externalSolution.solution);
        if (answerObj.answers !== undefined) {
            for (var h in answerObj.answers) {
                var n = answerObj.answers[h];
                if (n.widgets !== undefined) {
                    for (var f in n.widgets) {
                        var e = n.widgets[f];
                        if (e.text !== undefined) {
                            parsedSolution.solution += e.text
                        }
                    }
                }
                if (n.explanations !== undefined) {
                    for (var b in n.explanations) {
                        var a = n.explanations[b];
                        let stepText = "";
                        if (a.explanations !== undefined) {
                            for (var l in a.explanations) {
                                var m = a.explanations[l];
                                if (m.widgets !== undefined) {
                                    for (var f in m.widgets) {
                                        var e = m.widgets[f];
                                        stepText += e.text
                                    }
                                }
                            }
                        }
                        parsedSolution.steps.push(stepText)
                    }
                }
            }
        }
        return parsedSolution
    },
    getScrollHeight: function(a) {
        var b = $(a);
        if (b.size() == 0) {
            return 0
        }
        return b[0].scrollHeight
    },
    showVerify: function() {
        if (_.stepsRes.showVerify) {
            $("#verify-section").show()
        }
    },
    makeStepByStepSolution: function() {
        var a = this;
        a.inStepByStep = true;
        a.openHideStepsNew($(".solution_title_container_highest"), true);
        a.populateStepByStep("#multipleSolutions", a.stepsRes.solutions[0], a.stepsRes.standardQuery);
        $("#multipleSolutions .next-step-button").click();
        $("#verify-section").hide();
        $("#similar").hide();
        $("#SimilarLink").hide();
        $("#numberLine").hide();
        $("#numberLineLoader").hide();
        $("#empty_number_line_img").hide();
        $("#numberLine img").remove();
        $("#Plot_dynaimc").hide()
    },
    populateStepByStep: function(b, a, g, h) {
        var e = this;
        $(b + " .solution_title_container_highest").remove();
        $(b + " #steps-container .solution_step_list_item").remove();
        $(b + " #steps-container hr").remove();
        $(b + " .solutionHints").remove();
        $(b + " .solution_outside_box").css("padding-top", "7px");
        $(b + " .show-hide-steps-div").remove();
        $(b + " .solution_outside_box").prepend(e.getSettingsContent("stepByStep"));
        $(b + " .show-hide-steps-div").after(e.getSolvingOptions());
        e.stepIndex = 0;
        e.steps = getFixedStepsFormat(a.steps);
        var f = $(b + " #steps-container").parent();
        var j = $("<div class='solutionHints'></div>");
        j.append("<div class='nl-third nl-resetLH'>&nbsp;</div>");
        j.append("<div class='nl-third nl-totalHints nl-resetLH'></div>");
        j.append("<div class='nl-third nl-textRight nl-resetLH'><a class='next-step-button nl-nextHintLink nl-resetLH'>" + i18n("Next Hint") + " <i class='nl-practice-sprite nl-practice-sprite-next'></i></a></div>");
        if (e.stepsRes.showVerify) {
            j.append("<div style='padding-top: 33px; min-height: 44px;'><span id='verify-input' style='width: 490px; margin-top: -3px !important;' class='mathquill-input mathquill-editable' rel='tooltip' title=''></span><div class='nl-answerCaption nl-greenText nl-hidden'><span>" + i18n("js.Correct Answer") + " :)</span><span class='nl-hideAnswerCaption'></span></div><div class='nl-answerCaption nl-redText nl-hidden'><span>" + i18n("js.Let's Try Again") + " :(</span><span class='nl-hideAnswerCaption'></span></div><div class='nl-answerCaption nl-goldText nl-hidden'><span>" + i18n("Try to simplify further") + "</span><span class='nl-hideAnswerCaption'></span></div><button class='verify-button'><strong>" + i18n("Verify") + "</strong></button></div>")
        }
        f.append(j);
        f.find(".mathquill-editable:not(.mathquill-rendered-math)").mathquill("editable");
        f.find(".mathquill-editable").mathquill("placeholder", i18n("js.Know the answer? Give it a try"));
        $("#steps-container").show();
        f.find(".verify-button").unbind("click").click(function(l) {
            if (h) {
                symbolab_log("Registration", "ClickedFeature", "Solver\tSimilar\tVerifyButton", g)
            }
            SOLUTIONS.verify($(this), "StepByStep", g)
        });
        f.find("#verify-input").unbind("keyup").keyup(function(m) {
            var l = (m.charCode) ? m.charCode : m.keyCode;
            if (l === 13) {
                if (h) {
                    symbolab_log("Registration", "ClickedFeature", "Solver\tSimilar\tVerifyEnter", g)
                }
                SOLUTIONS.verify($(this).parent().find("button"), "StepByStep", g)
            }
        });
        $(b + " .next-step-button").unbind("click").click(function() {
            if (e.stepIndex < e.steps.length) {
                $(b + " #steps-container").append(e.createStepListItem(e.steps[e.stepIndex]));
                $(b + " #steps-container .mathquill-embedded-latex:not(.mathquill-rendered-math)").mathquill()
            }
            if (h) {
                symbolab_log("Registration", "ClickedFeature", "Solver\tSimilar\tNext", g)
            } else {
                if (e.stepIndex > 0) {
                    symbolab_log("Solutions", "StepByStep-Next")
                }
            }
            e.stepIndex++;
            if (e.stepIndex <= e.steps.length) {
                $(b + " .nl-totalHints").text(e.stepIndex + " / " + e.steps.length)
            }
            if (e.stepIndex >= e.steps.length) {
                $(b + " .next-step-button").addClass("nl-disabled")
            }
        })
    },
    getSolvingOptions: function() {
        _ = this;
        if (!_.stepsRes.solvingOptions) {
            return
        }
        var a = $("<div id='multipleOptions' class='newSelect closed'></select>");
        a.append("<span class='arrows'><i class='nl-practice-sprite'></i></span>");
        a.append("<div class='value' value='" + _.stepsRes.solvingOptions.returnedOption + "'></div>");
        var b = $("<div class='slItems'></div>");
        for (var e = 0; e < _.stepsRes.solvingOptions.count; e++) {
            _.stepsRes.solvingOptions.displays[e] = _.stepsRes.solvingOptions.displays[e].replace(/\\mathrm{/, "");
            _.stepsRes.solvingOptions.displays[e] = _.stepsRes.solvingOptions.displays[e].replace(/}/, "");
            if (_.stepsRes.solvingOptions.returnedOption === _.stepsRes.solvingOptions.queries[e]) {
                a.find(".value").append(_.stepsRes.solvingOptions.displays[e])
            } else {
                b.append("<div class='slItem' value='" + _.stepsRes.solvingOptions.queries[e] + "'>" + _.stepsRes.solvingOptions.displays[e] + "</div>")
            }
        }
        a.append(b);
        if (!_.inStepByStep) {
            symbolab_log("Registration", "SeenFeature", "Solver\tSolvingOptions")
        }
        return a
    },
    getTopLockedIndication: function() {
        var a = $("<div class='lockedSteps-div'></div>");
        a.append("<span class='locked-step'></span>");
        a.append("<div class='value'>" + i18n("unlock steps") + "</div>");
        symbolab_log("Registration", "SeenFeature", "Solver\tTopLockedStep\t" + this.stepsRes.topic + "\t" + this.stepsRes.subTopic, this.stepsRes.query);
        return a
    },
    getSettingsContent: function(f, e) {
        _ = this;
        var g = $("<div class='show-hide-steps-div'></div>");
        var a = $("<div class='stepsSelect newSelect closed'></select>");
        a.append("<span class='arrows'><i class='nl-practice-sprite'></i></span>");
        a.append("<div class='value' value='" + f + "'>" + _.showHideMap[f] + "</div>");
        var b = $("<div class='slItems'></div>");
        b.append("<div class='slItem' value='hideSteps'>" + _.showHideMap.hideSteps + "</div>");
        b.append("<div class='slItem' value='showSteps'>" + _.showHideMap.showSteps + "</div>");
        if (!e) {
            b.append("<div class='slItem' value='stepByStep'>" + _.showHideMap.stepByStep + "</div>");
            b.append("<div class='slItem' value='showAllSteps'>" + _.showHideMap.showAllSteps + "</div>")
        }
        a.append(b);
        g.append(a);
        return g
    },
    removeSolvingOptions: function() {
        $("#multipleOptions").remove()
    },
    hasTitle: function(a, e) {
        if (a.title && a.title.text && a.title.text.createdText) {
            if (a.title.text.createdText.indexOf(e) >= 0) {
                return true
            }
        }
        if (a.steps) {
            for (var b = 0; b < a.steps.length; b++) {
                if (this.hasTitle(a.steps[b], e)) {
                    return true
                }
            }
        }
        return false
    },
    writeSteps: function(b) {
        var a = this;
        if (b) {
            if (typeof SOLUTIONS !== "undefined" && !SOLUTIONS.page) {
                SOLUTIONS.page = "step-by-step"
            }
            if (b.errorMessage) {
                if (this.requestLang === "en" && this.isSolutionPage() && b.chURL) {
                    a.chURL = b.chURL;
                    symbolab_log("Registration", "SeenFeature", "Solver\tCH Link", this.stepsRes.query);
                    $("#chMsg").show()
                } else {
                    $("#multipleSolutions").append(this.createMessageBox(b.errorMessage));
                    $("#multipleSolutions .mathquill-embedded-latex").mathquill();
                    if (b.errorMessage.indexOf("Upgrade") >= 0) {
                        $("#multipleSolutions .mathquill-embedded-latex").after(" <a class='upgrde-button' onclick='showSignUpSubscribe(\"SolutionsSolvingMethod\")'>Upgrade</a>")
                    }
                }
            } else {
                if (b.solutions !== undefined) {
                    $("#multipleSolutions").empty();
                    if (a.isSolutionPage() || isMobileRender()) {
                        if (b.dymAlternatives.length > 0) {
                            a.showDym2($("#dym"), b.dymAlternatives)
                        }
                    }
                    a.parseSolutions(b.solutions);
                    if (a.requestLang !== "" && a.requestLang !== b.stepLang) {
                        $(".onlyEnglish").show()
                    }
                    if ((a.isSolutionPage() || isMobileRender()) && b.relatedQueries && b.relatedQueries.length > 0) {
                        a.addRelatedProblems($("#relatedList"), b.relatedQueries, 10);
                        $("#RelatedLink").show()
                    }
                } else {
                    if (b.computesTo && b.computesTo !== "NA") {
                        $("#multipleSolutions").append(this.createMessageBox(b.computesTo))
                    } else {
                        if (this.requestLang === "en" && this.isSolutionPage() && b && b.chURL) {
                            a.chURL = b.chURL;
                            symbolab_log("Registration", "SeenFeature", "Solver\tCH Link", this.stepsRes.query);
                            $("#chMsg").show()
                        } else {
                            if (b.externalSolution == undefined) {
                                this.showCannotSolve()
                            }
                        }
                    }
                }
            }
        } else {
            this.showCannotSolve()
        }
        $("#ExamplesLink").show()
    },
    showDym2: function(m, j) {
        if (!SOLUTIONS.page) {
            SOLUTIONS.page = "step-by-step"
        }
        for (var h = 0; h < j.length; h++) {
            var g = j[h];
            var f = "dym" + h;
            if (g.origin && g.origin.indexOf("cluster") >= 0) {
                f = "dymcluster"
            }
            var b = "/solver/" + SOLUTIONS.page + "/?or=" + f + "&query=";
            var l = this.combineTextEquation(g.command, g.equation);
            var e = $("<a href='" + b + encodeURIComponent(l) + "'></a>");
            e.append(createMathquillSpan("dymText", "\\mathrm{" + i18n("Solve instead") + "}:\\:"));
            e.append(createMathquillSpan("dymQuery", "\\mathrm{" + l + "}"));
            m.append(e);
            if (h < j.length - 1) {
                m.append("<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>")
            }
        }
        m.show();
        m.find(".mathquill-embedded-latex").mathquill()
    },
    showDYM: function(l, h) {
        var j = SYMBOLAB.params.OS;
        var a = this.isSolutionPage() ? "/solver/" + SOLUTIONS.page + "/?or=dym&query=" : "/mobile_web.html?OS=" + j + "&or=dym&query=";
        var f = this.combineTextEquation(h.outText, h.outEquation);
        var e = this.combineTextEquation(h.dymText, h.dymEquation);
        var g = $("<a href='" + a + encodeURIComponent(f) + "'></a>");
        g.append(createMathquillSpan("solvingText", "\\mathrm{" + i18n("Solving") + "}\\:"));
        g.append(createMathquillSpan("solvingQuery", "\\mathrm{" + f + "}"));
        l.find(".dym").append(g);
        if (h.showInstead) {
            if (isMobileRender()) {
                l.find(".dym").append("<br/>")
            } else {
                l.find(".dym").append(createMathquillSpan("dymText", "\\quad\\quad"))
            }
            var b = $("<a class='dymRight' href='" + a + encodeURIComponent(e) + "'></a>");
            b.append(createMathquillSpan("dymText", "\\mathrm{" + i18n("Solve instead") + "}\\:"));
            b.append(createMathquillSpan("dymQuery", "\\mathrm{" + e + "}"));
            l.find(".dym").append(b)
        }
        l.show();
        l.find(".mathquill-embedded-latex").mathquill()
    },
    addRelatedProblems: function(g, e, f) {
        g.empty();
        if (!SOLUTIONS.page) {
            SOLUTIONS.page = "step-by-step"
        }
        for (var h = 0; h < e.length && h < f; h++) {
            var n = e[h];
            var b = n.command ? n.command + " " + n.equation : n.equation;
            var l = "related";
            if (n.origin && n.origin.indexOf("cluster") >= 0) {
                l = "relatedcluster"
            }
            var j = "/solver/" + SOLUTIONS.page + "/" + encodeURIComponent(b) + "?or=" + l;
            var a = b.replace(/ /g, "\\:").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            a = prepareQueryForMathQuill(a);
            var m = $('<li><a class="clickable" onclick="window.location=\'' + j + '\';"><span class="mathquill-embedded-latex">' + a + '</span> <svg><use href="#solutions-img"></use></svg></a></li>');
            g.append(m)
        }
        $("#related").show();
        g.find(".mathquill-embedded-latex").mathquill()
    },
    showCannotSolve: function() {
        var a = (typeof widget != "undefined" && widget === 1);
        if (a || typeof SOLUTIONS != "undefined") {
            $("#multipleSolutions").append(this.createMessageBox(i18n("cannot solve")));
            $("#multipleSolutions .mathquill-embedded-latex").mathquill()
        }
    },
    getPlotSettings: function(a) {
        return this.plotSettings ? this.plotSettings : {
            showZoom: a,
            pixelRatio: window.devicePixelRatio,
            lineWidth: 2
        }
    },
    // doSimilarProblem: function() {
    //     var a = this;
    //     if (a.requestLang !== "en") {
    //         return
    //     }
    //     $.ajax({
    //         type: "GET",
    //         url: "/pub_api/similar",
    //         beforeSend: authorizeAjaxWithSyPubToken,
    //         data: {
    //             language: a.requestLang,
    //             query: SYMBOLAB.params.query,
    //             origin: "solutions"
    //         },
    //         error: function(b) {
    //             pageExpired(b, "api_steps")
    //         },
    //         success: function(b) {
    //             if (b && !b.errorMessage && b.solutions !== undefined && b.solutions.length === 1 && b.showVerify) {
    //                 $("#similar").empty();
    //                 $("#similar").append("<h2>" + i18n("Try to solve the equation") + "</h2>");
    //                 var f = $('<div class="solution_div"></div>');
    //                 f.append(a.createSolutionBox(b.solutions[0], true));
    //                 $("#similar").append(f);
    //                 a.inStepByStep = true;
    //                 $("#verify-section").remove();
    //                 var e = $("#similar .solution_title_container_highest");
    //                 a.addContentIfNeeded(e);
    //                 a.populateStepByStep("#similar", b.solutions[0], b.standardQuery, true);
    //                 $("#similar .show-hide-steps-div").remove();
    //                 $("#similar #multipleOptions").remove();
    //                 $("#similar #steps-container li:first-child").remove();
    //                 $("#SimilarLink").show();
    //                 symbolab_log("Registration", "SeenFeature", "Solver\tSimilar", b.standardQuery);
    //                 a.inStepByStep = false
    //             }
    //         }
    //     })
    // },
    doDynamicPlot: function(m, j) {
        var p = this;
        if (p.stepsRes && p.stepsRes.numberLineInfo) {
            var n = SyNumberLine.fromNumberLineInfo($("#numberLine .solution_box"), $("#numberLine, #NumberLineLink"), p.stepsRes.numberLineInfo);
            if (n.valid) {
                $("#numberLine").show();
                $("#numberLineLoader").show();
                $("#empty_number_line_img").show();
                $("#NumberLineLink").show()
            }
        }
        if (p.stepsRes && p.stepsRes.plotInfo) {
            var h = $("#Plot_dynaimc");
            var l = $("#PlotLink");
            var b = p.stepsRes.plotInfo.plotRequest;
            if (b === "") {
                l.hide();
                h.hide()
            } else {
                if (b && !j) {
                    h.show();
                    p.syPlot = new SyPlot("#sy_graph", {}, this.getPlotSettings(m));
                    var o = h.find(".plotText");
                    o.hide();
                    var g = $("#sy_graph");
                    var a = $("#plot-loading");
                    a.css("position", "absolute");
                    a.css("margin-top", (g.height() / 2 + 1) + "px");
                    a.css("margin-left", (g.width() / 2 - 16) + "px");
                    a.show();
                    l.show();
                    if (b === "yes") {
                        b = SYMBOLAB.params.query
                    }
                    if (!SYMBOLAB.params.or) {
                        SYMBOLAB.params.or = "Solutions"
                    }
                    // $.ajax({
                    //     type: "POST",
                    //     url: "/pub_api/graph/plottingInfo",
                    //     beforeSend: authorizeAjaxWithSyPubToken,
                    //     data: {
                    //         userGraph: JSON.stringify({
                    //             formulas: [{
                    //                 fst: b
                    //             }]
                    //         }),
                    //         origin: SYMBOLAB.params.or,
                    //         nolog: true
                    //     },
                    //     error: function(q) {
                    //         a.hide();
                    //         pageExpired(q, "pub_api_graph_plottingInfo")
                    //     },
                    //     success: function(r) {
                    //         p.stepsRes.plotInfo = r;
                    //         a.hide();
                    //         var q = p.stepsRes && p.stepsRes.plotInfo ? p.stepsRes.plotInfo.graphCalcInputErrors : ["error"];
                    //         if (!Array.isArray(q) || q.length == 0 || q.length == 1 && !q[0]) {
                    //             p.doDynamicPlot(m, true)
                    //         } else {
                    //             l.hide();
                    //             h.hide()
                    //         }
                    //     }
                    // })
                } else {
                    try {
                        if (!j) {
                            h.show()
                        }
                        p.syPlot = new SyPlot("#sy_graph", this.stepsRes.plotInfo, this.getPlotSettings(m));
                        var o = h.find(".plotText");
                        o.show();
                        o.empty();
                        var f = this.getPlotTitle();
                        o.append(createMathquillSpan(null, f));
                        $("#ExamplesLink").show();
                        l.show();
                        mathquillifyVisible(h);
                        p.addViewMore()
                    } catch (e) {
                        l.hide();
                        h.hide()
                    }
                }
            }
        }
    },
    addViewMore: function() {
        var a;
        if (this.stepsRes.showViewLarger) {
            a = this.stepsRes.standardQuery;
            if ("System of Inequalities" === this.stepsRes.topic) {
                a = this.stepsRes.standardQuery.replaceAll(",", ";")
            }
        }
        if (a) {
            a = a.replace(/ /g, "\\:");
            a = encodeURI(a);
            a = a.replace(/\+/g, "%2B");
            $(".viewLargerPlot").attr("href", "/graphing-calculator?or=" + SYMBOLAB.params.or + "&functions=" + a);
            $(".viewLargerPlot").show()
        }
    },
    getPlotTitle: function() {
        var e = "\\mathrm{" + i18n("plotting") + ":} ";
        if (this.stepsRes.plotInfo.functionChanges && this.stepsRes.plotInfo.functionChanges[0]) {
            var b = this.stepsRes.plotInfo.functionChanges[0];
            e = e + b.plotTitle;
            if (b.paramsLatex && b.paramsLatex.length) {
                e += "\\quad\\mathrm{" + i18n("plot assuming") + "}";
                for (var a = 0; a < b.paramsLatex.length; a++) {
                    e += "\\quad ";
                    e += b.paramsLatex[a];
                    e += "=";
                    e += b.paramsReplacementsLatex[a]
                }
            }
        }
        return e
    },
    parseSolutions: function(b) {
        var f = $("#multipleSolutions");
        var g = $('<div class="new_solution_box_title"></div>');
        g.append("<h2>" + i18n("solution") + "</h2>");
        if (this.requestLang === "en" && this.isSolutionPage()) {
            g.append('<a href="/practice" class="practiceLinkTop">Keep Practicing ></a>')
        }
        var e = $("<div></div>");
        e.append(g);
        for (var a in b) {
            var h = b[a];
            if (h == null) {
                continue
            }
            var j = $('<div class="solution_div"></div>');
            j.append(this.createSolutionBox(h, true));
            e.append(j)
        }
        f.append(e.html());
        mathquillifyVisible(f);
        this.makeScrollable(f)
    },
    createSolutionBoxDiv: function(b, e) {
        var a;
        if (e) {
            a = $('<div class="solution_box solution_outside_box"></div>')
        } else {
            a = $('<div class="solution_box solution_inside_box"></div>')
        }
        if (b.step_id !== undefined) {
            a.attr("id", b.step_id)
        }
        if (b.interimType !== undefined) {
            a.attr("type", b.interimType)
        }
        return a
    },
    getTitleContainer: function(f, h) {
        var s = "SYSTEPS.showHideRule(this);";
        if (h) {
            s = (this.isSolutionPage() || this.isGeometryPage()) ? "" : "SYSTEPS.openHiddenSteps(this, true);"
        }
        var b = "";
        if (!f.isOpen && !this.isToLock(f)) {
            b = "steps" + this.stepsArrayIndex;
            this.stepsArray[this.stepsArrayIndex] = f;
            this.stepsHighestBox[this.stepsArrayIndex] = h;
            this.stepsArrayIndex++
        }
        var g = $("<div></div>", {
            id: b,
            onclick: s
        });
        if (h) {
            g.addClass("solution_title_container_highest")
        } else {
            g.addClass("solution_title_container")
        }
        if (h) {
            if (!f.isInfoStep) {
                var n;
                if (!this.subscribed && f.isLocked && this.isSolutionPage()) {
                    n = this.getTopLockedIndication()
                } else {
                    if (this.isSolutionPage()) {
                        var p = "hideSteps";
                        var j = !this.stepsRes.solutions || this.stepsRes.solutions.length > 1;
                        if (!j && this.stepsRes.solutions[0].steps && this.stepsRes.solutions[0].steps.length < 2) {
                            j = true
                        }
                        n = this.getSettingsContent(p, j)
                    } else {
                        n = $("<div></div>", {
                            "class": "show-hide-steps-div",
                            role: "button"
                        });
                        var m = $("<a></a>", {
                            "class": "show-hide-button show-hide-steps print-hide"
                        });
                        m.text(this.showStepsText);
                        if (isMobileRender() && shouldUpgrade()) {
                            n.addClass("locked_solution")
                        } else {
                            m.append(document.createTextNode(" \u00BB"))
                        }
                        n.append(m)
                    }
                }
                g.append(n)
            }
        } else {
            var r = $("<a></a>");
            if (f.isOpen) {
                r.append($("<span class='hideStepsButton'/>"));
                r.append($("<span class='hideButtonText'>" + i18n("hide steps") + "</span>"))
            } else {
                if (this.isToLock(f)) {
                    g.addClass("key");
                    r.append($("<span class='locked-step'/>"));
                    if (!this.seenLockedStep) {
                        var l = "Solver\tLockedStep\t" + this.stepsRes.topic + "\t" + this.stepsRes.subTopic;
                        if (this.isGeometryPage()) {
                            l = "Geometry2\tLockedStep"
                        }
                        if (isMobileRender()) {
                            l = "MobileWeb\t" + l
                        }
                        symbolab_log("Registration", "SeenFeature", l, this.stepsRes.query)
                    }
                    this.seenLockedStep = true
                } else {
                    r.append($("<span class='showStepsButton'/>"))
                }
                r.append($("<span class='showButtonText'>" + this.showStepsText + "</span>"))
            }
            g.append(r)
        }
        if (f.title === undefined) {
            g.append(createMathquillDiv("title", "title"))
        } else {
            if (f.isExternalStep && !f.isInterimStep) {
                var o = f.title.text.createdText;
                var q = "###" + o + "###";
                var e = $('<div class="solution_step_title"></div>');
                e.append(q);
                renderMathInElement(e[0], {
                    delimiters: [{
                        left: "###",
                        right: "###",
                        display: true
                    }]
                });
                if (e[0].innerText.indexOf("###") >= 0) {
                    this.showCannotSolve();
                    return
                }
                g.append(e)
            } else {
                g.append(this.getInfoLine("title", f.title))
            }
        }
        return g
    },
    isToLock: function(a) {
        if (typeof isCompare == "undefined") {
            return a.isLocked && !this.subscribed && (this.isGeometryPage() || this.isSolutionPage() || this.isNotebookPage() || this.isGraphingPage() || isMobileRender())
        } else {
            return false
        }
    },
    createSolutionBox: function(e, f) {
        var b = this.createSolutionBoxDiv(e, f);
        var a = this.getTitleContainer(e, f);
        b.append(a);
        if (e.isOpen || e.isInfoStep) {
            b.append(this.createSolutionBoxContent(e, f))
        }
        return b
    },
    createSolutionBoxContentUl: function(j, r, t) {
        var y = this;
        var o = true;
        var l;
        if (typeof(isCompare) != "undefined" && isCompare) {
            l = $('<ol style="margin-left:-15px !important;list-style:inherit;list-style-type: decimal;" type="1" id="steps-container" class="solution_step_list"></ol>')
        } else {
            l = $('<ul id="steps-container" class="solution_step_list"></ul>')
        }
        if (r) {
            l.append($("<li class='solution_step_list_itemc solution_steps_text'>" + (j.isInfoStep ? "" : i18n("steps")) + "</li>"))
        }
        if (j.definition !== undefined) {
            l.append(this.getDefintionLine(j.definition, r));
            o = false
        }
        if (j.general_rule !== undefined) {
            var p = $("<div></div>");
            p.append(this.getInfoLine("rule", j.general_rule));
            l.append(p);
            o = false
        }
        if (j.explanation !== undefined) {
            for (var u in j.explanation) {
                var p = $("<div></div>");
                p.append(createMathquillDiv("solution_step_explanation", j.explanation[u].createdText, j.explanation[u].id));
                l.append(p);
                o = false
            }
        }
        if (o === true && j.step_input !== undefined) {
            l.append(createMathquillDiv("solution_step_result", j.step_input));
            l.append($("<hr class='stepsHr'/>"))
        }
        var s = false;
        for (var q in j.steps) {
            var g = j.steps[q];
            var e = this.createStepListItem(g);
            if (this.isAddHR(e, l)) {
                l.append($("<hr class='stepsHr'/>"))
            }
            l.append(e);
            s = e.find(">.solution_step_result").size() > 0
        }
        if (s === false) {
            var e = $('<li class="solution_step_list_item"></li>');
            if (!j.isExternalStep) {
                e.append(createMathquillDiv("solution_step_result", j.entire_result))
            }
            l.append(e)
        }
        if (!y.inStepByStep && j.practiceLink && y.isSolutionPage() && "en" === y.requestLang) {
            var v = "Solver\tPracticeLink\tText\t" + j.practiceLink;
            symbolab_log("Registration", "SeenFeature", v);
            var n = i18n("js.click here to practice") + " " + i18n(j.practiceTopic).toLowerCase() + " »";
            var z = '$.when(symbolab_log("Registration", "ClickedFeature", "' + v + '")).always(function() {window.location="' + j.practiceLink + '"; });';
            var b = "stepsPracticeLink";
            var w = "";
            var x = $("<a>", {
                "class": b,
                onclick: z
            });
            x.append(w);
            x.append("<span>" + n + "</span>");
            l.append(x)
        }
        if (!y.inStepByStep && ($("#structured_topic").length > 0) && y.isSolutionPage() && "en" == y.requestLang) {
            var f = new StructuredGeometry(SYMBOLAB.params.query);
            if (f.shouldGenerateLinkForQuery()) {
                var h = "Solver\tGeometryLink";
                symbolab_log("Registration", "SeenFeature", h);
                var m = encodeURIComponent(SYMBOLAB.params.query);
                var n = i18n("js.click here to view in geometry solver") + " »";
                var z = '$.when(symbolab_log("Registration", "ClickedFeature", "' + h + '")).always(function() {window.location="/geometry#structuredQuery=' + m + '"; });';
                var b = "stepsPracticeLink";
                var w = "";
                var x = $("<a>", {
                    "class": b,
                    onclick: z
                });
                x.append(w);
                x.append("<span>" + n + "</span>");
                l.append(x)
            }
        }
        return l
    },
    createStepListItem: function(a) {
        var b = $('<li class="solution_step_list_item"></li>');
        if (a.aux && a.aux.found) {
            b.addClass("found")
        }
        if (a.aux && a.aux.let) {
            b.addClass("let")
        }
        if (a.isInterimStep) {
            var e = this.createSolutionBox(a);
            b.append(e);
            if (a.isShowSolutionAfterStep) {
                if (a.entire_result != undefined) {
                    b.append(createMathquillDiv("solution_step_result", a.entire_result))
                }
            }
        } else {
            this.populateStepListItem(b, a)
        }
        return b
    },
    createSolutionBoxContent: function(b, e, g) {
        _ = this;
        var a = this.createSolutionBoxContentUl(b, e, g);
        var f = $("<div></div>");
        if (!e) {
            f.addClass("solution_list_div")
        }
        f.append(a);
        return f
    },
    addNotesDiv: function() {
        _ = this;
        var a = $("#main-input").innerHeight();
        $(".nl-notesFav").css("margin-top", a / 2 - 15);
        $(".nl-notesFav").show()
    },
    saveSolutionNote: function(f, e) {
        var b = this;
        var a = $.Deferred();
        $.ajax({
            type: "POST",
            url: "/api/notebook/addNote",
            beforeSend: authorizeAjaxWithSyToken,
            data: {
                problem: f,
                topic: e,
                savedFrom: "Solutions"
            },
            success: function(g) {
                var h = g.response;
                a.resolve(h)
            },
            error: function() {
                a.reject()
            }
        });
        return a
    },
    deleteNote: function(b) {
        var a = this;
        return $.ajax({
            type: "POST",
            url: "/api/notebook/deleteNotes",
            beforeSend: authorizeAjaxWithSyToken,
            data: {
                problems: b,
                isMobile: false
            }
        })
    },
    deleteNoteMobile: function(b, e) {
        var a = this;
        $.ajax({
            type: "POST",
            url: "/api/notebook/deleteNotes",
            beforeSend: authorizeAjaxWithSyToken,
            data: {
                problems: b,
                isMobile: true
            }
        }).done(function() {
            if (e) {
                e()
            }
        })
    },
    addNoteMobile: function(f, e, b, g) {
        var a = this;
        $.ajax({
            type: "POST",
            url: "/api/notebook/addNote",
            beforeSend: authorizeAjaxWithSyToken,
            data: {
                problem: f,
                isMobile: true,
                isNotebook: b,
                license: e,
                topic: a.stepsRes.topic,
                savedFrom: a.NotebookSourceSolutions
            }
        }).done(function(h) {
            if (g) {
                g(h)
            }
        })
    },
    openCloseNotes: function() {
        var e = $(".notesTitle").next();
        var b = $(".notesTitle").parent();
        if (e.is(":visible")) {
            e.hide();
            $(".notesTitle").text(i18n("Save"))
        } else {
            e.show();
            $(".notesTitle").text(i18n("Notes"))
        }
        var a = b.outerHeight() + 3;
        if (typeof(SYPRAC) != "undefined") {
            a += 3
        }
        b.css("margin-top", "-" + a + "px")
    },
    populateStepListItem: function(e, n) {
        var p = this;
        if (n.step_id != undefined) {
            e.attr("id", n.step_id)
        }
        if (n.title != undefined) {
            if (n.general_rule != undefined) {
                if (this.requestLang == "he" || this.requestLang == "ar") {
                    n.title.text.createdText = n.general_rule.text.createdText + "\\quad:" + n.title.text.createdText
                } else {
                    n.title.text.createdText += ":\\quad " + n.general_rule.text.createdText
                }
                n.general_rule = null
            }
            var g = this.getInfoLine("title", n.title);
            if (n.practiceLink && !p.isPracticeIconAdded && !isMobileRender()) {
                var l = "Solver\tPracticeLink\tIcon\t" + n.practiceLink;
                symbolab_log("Registration", "SeenFeature", l);
                var o = $('<a onclick=\'$.when(symbolab_log("Registration", "ClickedFeature", "' + l + '")).always(function() { window.location="' + n.practiceLink + "\"; });' class='clickable solution-practice-link'><i class='nl-practice-sprite nl-practice-sprite-hintIcon-small'></i></a>");
                g.append(o);
                p.isPracticeIconAdded = true;
                var q = i18n("js.click here to practice") + " " + i18n(n.practiceTopic).toLowerCase();
                o.tooltipster({
                    theme: "tooltipster-light",
                    content: q
                })
            }
            e.append(g)
        }
        if (n.definition != undefined) {
            var b = $("<div></div>");
            b.append(this.getDefintionLine(n.definition, false));
            e.append(b)
        }
        if (n.general_rule != undefined) {
            e.append(this.getInfoLine("rule", n.general_rule))
        }
        if (n.explanation != undefined) {
            for (var j in n.explanation) {
                e.append(createMathquillDiv("solution_step_explanation", n.explanation[j].createdText, n.explanation[j].id))
            }
        }
        if (n.image !== undefined) {
            setTimeout(function() {
                var a = SyNumberLine.fromInStepImageUrl(e, $("blank"), n.image)
            }, 0)
        }
        if (n.steps != undefined) {
            for (var j in n.steps) {
                var m = n.steps[j];
                if (m.isInterimStep) {
                    var h = this.createSolutionBox(m);
                    e.append(h)
                } else {
                    this.populateStepListItem(e, m);
                    if (m.entire_result == null && j < (n.steps.length - 1)) {
                        e.append("<br/>")
                    }
                }
            }
        }
        if (n.entire_result != undefined) {
            if (n.isExternalStep) {
                var f = new RegExp("</?formula.*?>", "g");
                e.append(p.createSolutionStepBook(n.entire_result, f))
            } else {
                e.append(createMathquillDiv("solution_step_result", n.entire_result))
            }
        }
    },
    isAddHR: function(b, a) {
        var e = a.children().last();
        if (b.find(">.solution_box").size() > 0 && e.find(">.solution_step_result").size() == 1) {
            return true
        }
        if (e.size() == 0 || e.is("hr") || e.text() == "Steps") {
            return false
        }
        if (this.stepsRes && this.stepsRes.externalSolution) {
            return true
        }
        if ($(b).children().length <= 1) {
            return false
        }
        if (_.isGeometryPage()) {
            return true
        }
        if (e.find(">.solution_box").size() > 0 && e.find(">.solution_step_result").size() == 0) {
            return false
        }
        return true
    },
    getDefintionLine: function(e, j) {
        var g = $('<div class="solution_box solution_step_definition_main"></div>');
        var b = $('<div class="solution_step_definition" onclick="SYSTEPS.showHideRule(this)" ></div>');
        var f = $("<a></a>");
        f.append($("<span class='print-hide hideStepsButton'/>"));
        f.append($("<span class='print-hide hideButtonText'>" + i18n("hide definition") + "</span>"));
        b.append(f);
        b.append(createMathquillDiv("solution_step_title_text", e.text.createdText, e.text.id));
        g.append(b);
        var h = createMathquillDiv("solution_step_definition_text", e.extension.createdText, e.extension.id);
        g.append(h);
        return g
    },
    getInfoLine: function(f, a) {
        var e = $('<div class="solution_step_' + f + '"></div>');
        if (a.text) {
            var h = createMathquillSpan("solution_step_" + f + "_text", a.text.createdText, a.text.id);
            h.css("position", "relative");
            e.append(h);
            if (isMobileRender() == false) {
                if (a.extension != undefined) {
                    var b = $("<img class='print-hide solution_info_icon' src='/public/img/icon_info.jpeg' />");
                    var g = e.find(".multiline");
                    if (g.size() == 0) {
                        e.append(b)
                    } else {
                        g.last().append(b)
                    }
                    $(b).showBalloon({
                        contents: createMathquillDiv2("solution_step_extension_text", a.extension.createdText, a.extension.id).html(),
                        position: "top right",
                        offsetY: 15,
                        minLifetime: 0,
                        classname: "infoTip",
                        css: {
                            "max-width": "650px",
                            opacity: "1"
                        }
                    }).toggle(function() {
                        $(this).showBalloon();
                        $(".infoTip").find(".mathquill-embedded-latex").mathquill("redraw")
                    }, function() {
                        $(this).hideBalloon()
                    })
                }
            }
        }
        return e
    },
    openHideStepsNew: function(f, b) {
        var a = this;
        var g = $(f);
        var e = g.next();
        $(".notesMainDiv").remove();
        $(".stepsPracticeLink").remove();
        if (b) {
            this.addContentIfNeeded(g);
            a.updateNotesPractice(g);
            $(".show-hide-steps-div").after(a.getSolvingOptions())
        } else {
            e.hide();
            a.removeSolvingOptions()
        }
        f.find(".stepsSelect .value").attr("value", b ? "showSteps" : "hideSteps");
        f.find(".stepsSelect .value").text(a.showHideMap[b ? "showSteps" : "hideSteps"])
    },
    openHiddenSteps: function(g, a) {
        var b = this;
        var h = $(g);
        var e = h.find(".show-hide-steps");
        if (e.size() == 0) {
            return
        }
        if (isMobileRender() && shouldUpgrade()) {
            showUpgradeMessage();
            return
        }
        var f = h.next();
        $(".notesMainDiv").remove();
        $(".stepsPracticeLink").remove();
        if (e.text().indexOf(b.showStepsText) >= 0) {
            this.addContentIfNeeded(h);
            e.text("\u00AB " + i18n("hide steps"));
            b.updateNotesPractice(h);
            if (a) {
                symbolab_log("Registration", "ClickedFeature", "MobileWeb\tOpenSteps")
            }
        } else {
            f.hide();
            e.text(b.showStepsText + " \u00BB");
            if (a) {
                symbolab_log("Registration", "ClickedFeature", "MobileWeb\tCloseSteps")
            }
        }
    },
    setSavedNote: function(b, e) {
        var a = this;
        if (isUserLoggedIn()) {
            if (a.stepsRes && a.stepsRes.isInNotebook) {
                b.addClass(e)
            }
        }
    },
    updateNotesPractice: function(b) {
        var a = this;
        if (a.isSolutionPage()) {
            a.addNotesDiv()
        }
    },
    isSolutionPage: function() {
        if (isMobileRender()) {
            return false
        }
        return window.location.href.indexOf("/solver") >= 0 || window.location.href.indexOf("/popular") >= 0
    },
    isNotebookPage: function() {
        return window.location.href.indexOf("/notebook") >= 0
    },
    isGraphingPage: function() {
        return window.location.href.indexOf("/graphing-calculator") >= 0
    },
    isGeometryPage: function() {
        return window.location.href.indexOf("/geometry") >= 0
    },
    addContentIfNeeded: function(e) {
        var b = e.attr("id");
        if (b) {
            b = b.substr(5);
            var a = this.createSolutionBoxContent(this.stepsArray[b], this.stepsHighestBox[b], b);
            e.parent().append(a);
            mathquillifyVisible(a);
            this.makeScrollable(a);
            e.removeAttr("id")
        } else {
            e.next().show()
        }
    },
    openHiddenPlot: function() {
        if ($(".show-hide-plot").text().indexOf(i18n("show plot")) >= 0) {
            $(".show-hide-plot").text("« " + i18n("hide plot"));
            $("#plot-image").show();
            $("#sy_graph").show();
            $("#Plot_dynaimc").removeClass("plot-closed");
            if (isMobileRender()) {
                symbolab_log("Registration", "ClickedFeature", "MobileWeb\tOpenPlot")
            }
        } else {
            $(".show-hide-plot").text(i18n("show plot") + " »");
            $("#plot-image").hide();
            $("#sy_graph").hide();
            $("#Plot_dynaimc").addClass("plot-closed");
            if (isMobileRender()) {
                symbolab_log("Registration", "ClickedFeature", "MobileWeb\tClosePlot")
            }
        }
    },
    combineTextEquation: function(e, b) {
        var a = "";
        if (e) {
            a += e;
            a += " "
        }
        a += b;
        return a
    },
    createMessageBox: function(e) {
        var f = $('<div class="solution_div"></div>');
        var b = $('<div class="solution_box solution_outside_box"></div>');
        var a = $("<div class='solution_title_container_highest'> </div>");
        a.append(createMathquillDiv("solution_step_title", e));
        b.append(a);
        f.append(b);
        return f
    },
    isShowMoreImage: function(a) {
        return $(a).find(".showStepsButton").size() > 0
    },
    changeToShowMore: function(b) {
        var a = $(b).find(".hideStepsButton");
        a.removeClass("hideStepsButton");
        a.addClass("showStepsButton");
        var e = $(b).find(".hideButtonText");
        e.removeClass("hideButtonText");
        e.addClass("showButtonText");
        e.html(this.showStepsText)
    },
    changeToShowLess: function(b) {
        var a = $(b).find(".showStepsButton");
        a.removeClass("showStepsButton");
        a.addClass("hideStepsButton");
        var e = $(b).find(".showButtonText");
        e.removeClass("showButtonText");
        e.addClass("hideButtonText");
        e.html(i18n("hide steps"))
    },
    showMobileAppDownload: function(b, e) {
        symbolab_log("Registration", "ClickedFeature", b);
        var a = $("#store-prompt");
        a.find("#close-btn").off("click").on("click", function(f) {
            f.preventDefault();
            a.addClass("hide-important")
        });
        a.find("span").text(e);
        a.find("#store-logo-link").off("click").on("click", function(f) {
            f.preventDefault();
            a.addClass("hide-important");
            $.when(symbolab_log("Registration", "OpenStore", b)).always(function() {
                goToStore()
            })
        });
        a.removeClass("hide-important")
    },
    showHideRule: function(g) {
        var j = $(g);
        if (j.find(".show-hide-steps").size() > 0) {
            return
        }
        var e = $(g).next();
        if ($(g).find(".locked-step").size() > 0) {
            var f = "Solver\tLockedStep\t" + this.stepsRes.topic + "\t" + this.stepsRes.subTopic + "\t" + j.parent().attr("type");
            if (this.isGeometryPage()) {
                f = "Geometry2\tLockedStep\t" + j.parent().attr("type")
            }
            if (isMobileRender()) {
                _.showMobileAppDownload("MobileWeb\t" + f, i18n("js.mobile_locked_step_click"))
            } else {
                showSignUpSubscribe(f)
            }
        } else {
            if (this.isShowMoreImage(g)) {
                if ((this.isSolutionPage() || isMobileRender()) && !_.dontFireOpenInnerEvent && window.location.href.indexOf("compare.html") < 0) {
                    f = "Solver\t" + (this.subscribed ? "SubsInterimStep" : "InterimStep") + "\t" + this.stepsRes.topic + "\t" + this.stepsRes.subTopic + "\t" + j.parent().attr("type");
                    if (isMobileRender()) {
                        f = "MobileWeb\t" + f
                    }
                    symbolab_log("Registration", "ClickedFeature", f)
                } else {
                    if (this.isGeometryPage()) {
                        var h = j.parent().parent().hasClass("found");
                        var b = j.parent().parent().parent().parent().parent().parent().hasClass("solution_div");
                        f = "Geometry2\t";
                        if (h) {
                            f += "GoalStep"
                        } else {
                            if (b) {
                                f += "TopStep"
                            } else {
                                f += "InnerStep"
                            }
                        }
                        f += "\t" + j.parent().attr("type");
                        symbolab_log("Registration", "ClickedFeature", f)
                    }
                }
                this.addContentIfNeeded(j);
                this.changeToShowLess(g)
            } else {
                e.hide();
                this.changeToShowMore(g)
            }
        }
        if (isMobileRender() == false) {
            var a = $("img.solution_info_icon");
            if (a.hideBalloon) {
                a.hideBalloon()
            }
        }
    },
    resetSteps: function() {
        $("#show-hide-steps-div").hide();
        $("#steps-container").hide();
        $(".show-hide-steps").text(i18n("show steps") + " »");
        $("#steps-container").find(".steps ul").empty();
        $("#steps-container h2").text("")
    },
    makeScrollable: function(b) {
        var a = this;
        b.find(".solution_step_title, .solution_step_result, .solution_step_explanation, .solution_step_definition_text").each(function() {
            if ($(this).is(":visible") && !$(this).hasClass("syscrollable")) {
                var e = $(this).find(".mathquill-embedded-latex");
                if (e.length == 1) {
                    a.createScroll(this)
                } else {
                    $(this).find(".multiline").each(function() {
                        a.createScroll(this)
                    })
                }
            }
        });
        b.find(".tableMatrix td:visible").each(function() {
            var e = getActualWidth($(this), true);
            if (e > $(this).width()) {
                $(this).css("min-width", e + "px")
            }
        })
    },
    createScroll: function(e) {
        var b = this;
        if ($(e).width() == 0) {
            return
        }
        var a = getActualWidth(e, true);
        var f = getActualWidth(e, false);
        if (f < $(e).width() + 1) {
            return
        }
        createScrollForce(e, a)
    }
};
if (typeof Symbolab !== "undefined") {
    Symbolab.prototype.getClassString = function(e) {
        for (var b = 0; b < e.debugInfo.length; b++) {
            var a = e.debugInfo[b];
            if (a.indexOf("StepObject=") == 0) {
                return a
            }
        }
        return null
    }
}
var SymbolabEquationSuggest = function() {
    this.init()
};
SymbolabEquationSuggest.prototype = {
    init: function() {
        var a = this;
        $("#main-input").keyup(function(f) {
            var b = (f.charCode) ? f.charCode : f.keyCode;
            if ((f.keyCode == 37) || (f.keyCode == 39)) {
                return false
            }
            if ($("table#Calculator").is(":visible")) {
                return false
            }
            if (f.keyCode == 38) {
                if ($("#CodePadSuggestions").is(":visible")) {
                    a.moveSuggestion(-1)
                }
            } else {
                if ((f.keyCode != 8) && (SYPAD.currentToolbar == "Calc") && (symbolab.lastInsertedIsEquals() == 1)) {
                    a.updateCalculation()
                } else {
                    if (f.keyCode == 40) {
                        if ($("#CodePadSuggestions").is(":visible")) {
                            a.moveSuggestion(1)
                        }
                    } else {
                        if (f.keyCode == 27) {
                            a.selectChild("#CodePadSuggestions").hide()
                        } else {
                            var e = SYPAD.inputValue("latex");
                            setTimeout(function() {
                                var g = SYPAD.inputValue("latex");
                                if (g == "") {
                                    $("#CodePadSuggestions").hide()
                                } else {
                                    if (e === g) {
                                        a.updateSuggestions(g)
                                    }
                                }
                            }, 150)
                        }
                    }
                }
            }
        })
    },
    moveSuggestion: function(e) {
        var b;
        var a = $("#CodePadSuggestions li.active");
        if (e < 0 && a.length == 0) {
            return
        }
        if (a.length == 0) {
            b = $("#CodePadSuggestions li:first")
        } else {
            if (e == 1) {
                b = a.next()
            } else {
                if (e == -1) {
                    b = a.prev()
                }
            }
        }
        if (b.length == 0) {
            return
        }
        this.highlightSuggestion(a, b, true);
        SYPAD.inputBox().focus()
    },
    highlightSuggestion: function(b, e, a) {
        if (b) {
            b.removeClass("active")
        }
        e.addClass("active");
        if (a) {
            SYPAD.replaceInput(e.attr("title"))
        }
    },
    clearSuggestions: function(a) {
        var b = $("#CodePadSuggestions");
        b.find("li").remove();
        b.hide()
    },
    updateSuggestions: function(b) {
        if (this.updatingSuggestions || this.disable_suggestions) {
            return
        }
        this.updatingSuggestions = true;
        var e = this;
        var a = $("#CodePadSuggestions");
        $.ajax({
            type: "GET",
            url: "/suggest",
            data: {
                userId: SYMBOLAB.params.userId,
                connected: SYMBOLAB.params.connected,
                language: SYMBOLAB.params.language,
                query: b
            },
            error: function(f) {
                e.updatingSuggestions = false;
                a.hide()
            },
            success: function(g) {
                e.clearSuggestions();
                if (g == undefined || g.length == 0) {
                    a.hide();
                    e.updatingSuggestions = false;
                    return
                }
                for (var f in g) {
                    var h = g[f];
                    e.addSuggestion(h.display)
                }
                a.show();
                e.updatingSuggestions = false;
                a.find(".mathquill-embedded-latex:not(.mathquill-rendered-math)").mathquill();
                a.find("li").hover(function(j) {
                    var l = $("#CodePadSuggestions li.active");
                    var m = $(j.currentTarget);
                    e.highlightSuggestion(l, m, false)
                });
                a.find("li").click(function(l) {
                    var n = a.find("li.active");
                    var o = $(l.currentTarget);
                    e.highlightSuggestion(n, o, true);
                    var j = (typeof widget != "undefined" && widget == 1);
                    if (j) {
                        makeWidgetSearch()
                    } else {
                        var m = SYPAD.inputValue("latex");
                        SYMBOLAB.forwardSearch(m, "sug")
                    }
                })
            }
        })
    },
    addSuggestion: function(a) {
        a = prepareQueryForMathQuill(a);
        $("#CodePadSuggestions").append('<li title="' + a + '"><div class="mathquill-embedded-latex"">' + a + "</div></li>")
    }
};

function createAndDownloadPDF() {
    symbolab_log("Solutions", "PDF", null, $("#main-input").mathquill("latex"));
    showGeneratePdf().pipe(function() {
        beforePrint(true);
        var l, e, a, f;
        var j = new jsPDF({
            unit: "pt",
            format: "a4",
            compress: true,
            autoSize: true
        });
        var h = (j.internal.pageSize.height ? j.internal.pageSize.height : j.internal.pageSize.heightfunction) - 40;
        var g = [];
        setTimeout(function() {
            $("body").toggleClass("pdf");
            window.scrollTo(0, 0);
            html2canvas($("#symbolabLogoPrint img")[0], {
                background: "#fff",
                scale: 2,
                onrendered: function(o) {
                    l = o.toDataURL("image/jpeg", 1)
                }
            });
            var n = 10,
                m = $("#multipleSolutions").height();
            if (m > 3000 && m < 5000) {
                n = 7
            } else {
                if (m > 5000 && m < 8000) {
                    n = 3
                } else {
                    if (m > 8000) {
                        n = 2
                    }
                }
            }
            html2canvas($("#multipleSolutions").get(0), {
                background: "#fff",
                scale: n,
                onrendered: function(p) {
                    var x = 500 / (p.width / p.height);
                    var z = h - 100;
                    var A = {};
                    if (x > z) {
                        A[0] = z;
                        var q = Math.floor((x - z) / h);
                        for (var s = 0; s <= q; s++) {
                            var r = z + s * h;
                            var t = s == q ? x : r + h;
                            A[r] = t
                        }
                    } else {
                        A[0] = x
                    }
                    for (var y in A) {
                        if (A.hasOwnProperty(y)) {
                            var w = y / x * p.height;
                            var v = A[y] / x * p.height;
                            var o = document.createElement("canvas");
                            o.setAttribute("height", v - w);
                            o.setAttribute("width", p.width);
                            var B = o.getContext("2d");
                            B.drawImage(p, 0, w, p.width, v - w, 0, 0, p.width, v - w);
                            var u = o.toDataURL("image/jpeg", 1);
                            g.push({
                                src: u,
                                ratio: o.width / o.height
                            })
                        }
                    }
                }
            })
        }, 500);
        var b = window.setInterval(function() {
            if (l != undefined && g.length > 0) {
                clearInterval(b);
                j.addImage(l, "JPEG", 200, 20, 150, 50);
                j.addImage(g[0].src, "JPEG", 50, 100, 500, 500 / g[0].ratio);
                for (var m = 1; m < g.length; m++) {
                    j.addPage();
                    j.addImage(g[m].src, "JPEG", 50, 20, 500, 500 / g[m].ratio)
                }
                j.save("Symbolab - Solutions.pdf");
                $("body").toggleClass("pdf");
                afterPrint();
                $(".featherlight-close").click()
            }
        }, 500)
    })
}
var printSolutionPage = function() {
    symbolab_log("Solutions", "Print", null, $("#main-input").mathquill("latex"));
    beforePrint(false);
    setTimeout(function() {
        window.print();
        afterPrint()
    }, 500)
};
var beforePrint = function(a) {
    $.when($("#symbolabLogoPrint").append("<a class='printLogo' href='/'><img  src='/public/img/logo-s.png' alt='Symbolab Logo'></a>")).done(function() {
        if (localStorage.getItem("settings.printOpen") == "yes") {
            $(".stepsSelect").each(function() {
                SYSTEPS.openHideStepsNew($(this).parent().parent(), true)
            });
            var h = true;
            while (h) {
                h = false;
                $(".showStepsButton").each(function() {
                    SYSTEPS.showHideRule($(this).parent().parent());
                    h = true
                })
            }
        }
        if (localStorage.getItem("settings.printGraph") == "no") {
            $("#Plot_dynaimc").hide()
        }
        var g = 400;
        var e = a ? 1020 : 1300;
        var b = $("#multipleSolutions").height();
        if (b < g) {
            $("#multipleSolutions").prepend('<div class="printWatermark"><p style="top:400px;">Symbolab</p></div>')
        }
        for (var f = g; f < $("#multipleSolutions").height(); f += e) {
            $("#multipleSolutions").prepend('<div class="printWatermark"><p style="top:' + f + 'px;">Symbolab</p></div>')
        }
        $("#Plot_dynaimc").prepend('<div class="printWatermark"><p>Symbolab</p></div>');
        if (!SOLUTIONS.subscribed) {
            createUpgradeTooltipOnly($(".printIcon"), ".printIcon", "SolutionsPrint", "to set your print & pdf preferences", "left", true)
        } else {
            showPointOfInterest(".printIcon", '<a class="upgradeLink" href="/user#settings">Click here</a> to set your print & pdf preferences', {
                side: "left"
            })
        }
    })
};
var afterPrint = function() {
    $(".printWatermark").remove();
    $(".printLogo").remove();
    if (localStorage.getItem("settings.printGraph") == "no") {
        $("#Plot_dynaimc").show()
    }
};
var Solutions = function(b, g, f, a, l, e, j, h) {
    this.subject = b;
    this.page = g;
    this.query = f;
    this.input = a;
    this.input_back = l;
    this.appLangs = e;
    this.curLang = j;
    this.subscribed = (h == "true");
    this.subjectUl;
    this.installBehavior();
    this.activeSuggestionIndex = 0;
    this.subjectSuggestions = 0
};
Solutions.prototype = {
    init: function() {
        this.updatePage();
        if (SYPAD !== undefined) {
            SYPAD.inputBox().focus()
        }
        jQuery(document).bind("keydown", function(a) {
            if ((a.metaKey || a.ctrlKey) && a.keyCode === 80) {
                printSolutionPage();
                return false
            }
        });
        $("#itunesLink").click(function() {
            symbolab_log("Solutions", "iOSLink")
        });
        $(".viewLargerPlot").click(function(b) {
            b.preventDefault();
            var a = $(this).attr("href");
            $.when(symbolab_log("Registration", "ClickedFeature", "Solver\tViewLargerPlot")).always(function() {
                window.location = a
            })
        });
        $("#chMsg button").click(function() {
            symbolab_log("Registration", "ClickedFeature", "Solver\tCH Link");
            $.featherlight("#chModal")
        });
        $("#chProceed").click(function() {
            var a = SYSTEPS.chURL;
            if (!$(".featherlight-content #chAgree").is(":checked")) {
                a = a.replace(/&problem=.+/, "")
            }
            $.when(symbolab_log("Registration", "ShowSignUp", "Solver\tCH Link")).always(function() {
                window.location = a
            })
        });
        $("#androidLink").click(function() {
            symbolab_log("Solutions", "AndroidLink")
        });
        $(".embedPost").click(function() {
            symbolab_log("Solutions", "Blog", $(this).find(".post_title").text())
        });
        if ($(".structuredWhat").size() === 1) {
            $(".structuredWhat").click()
        }
    },
    updatePage: function() {
        if (this.page.indexOf("chemi") >= 0) {
            SOLUTIONS.switchPad(i18n("full pad"));
            setTimeout(function() {
                $(".pad-toolbar-chemistry").click()
            }, 500)
        } else {
            if (this.page.indexOf("matrix") >= 0) {
                SOLUTIONS.switchPad(i18n("full pad"));
                $(".pad-toolbar-matrix").click()
            } else {
                if (this.page.indexOf("boolean") >= 0 || this.page.indexOf("set-theory") >= 0 || this.page.indexOf("truth-table") >= 0 || this.page.indexOf("logical-sets") >= 0) {
                    SOLUTIONS.switchPad(i18n("full pad"));
                    $(".pad-toolbar-accents").click()
                } else {
                    if (this.page.indexOf("triangle") >= 0 || this.page.indexOf("quadrilateral") >= 0 || this.page.indexOf("trapezoid") >= 0 || this.page.indexOf("parallelogram") >= 0 || this.page.indexOf("parallelogram") >= 0 || this.page.indexOf("rhombus") >= 0 || this.page.indexOf("rectangle") >= 0 || this.page.indexOf("square") >= 0 || this.page.indexOf("law-of") >= 0 || this.page.indexOf("line-intersection") >= 0) {
                        var a = "$.when(symbolab_log('Geometry', 'StructuredTooltip')).always(function() { window.location='/geometry'; });";
                        showPointOfInterest("#structuredTop", '<a class="clickable" onclick="' + a + '">' + i18n("js.Geometry Structured Tooltip") + "</a>", {
                            side: "bottom"
                        })
                    }
                }
            }
        }
        this.updateMenu();
        if (this.query === "") {
            if (this.input && SYPAD !== undefined) {
                SYPAD.inputBox().mathquill("write", this.input.replace(/&amp;/g, "&"), this.input_back)
            }
            if (this.page.indexOf("system-of-equations") >= 0) {
                $(".as300").insertAfter("#Examples")
            }
        }
        if (this.query || !this.subscribed) {
            $("#ExamplesLink").show()
        }
        if (this.query) {
            $("#steps-loading").show();
            this.doSolve()
        }
    },
    updateMenu: function() {
        var a = this;
        if (a.page === "") {
            return
        }
        if (a.page === "calculus-calculator" || a.page === "pre-algebra-calculator" || a.page === "algebra-calculator" || a.page === "matrix-vector-calculator" || a.page === "functions-graphing-calculator" || a.page === "geometry-calculator") {
            $(".ma").eq(0).click();
            return
        }
        $(".nl-leftNav li a").each(function(f) {
            if ($(this).attr("href").indexOf("/" + a.page) >= 0) {
                $(this).addClass("active");
                var e = $(this).parents("li");
                for (var g = e.length - 1; g >= 0; g--) {
                    var b = e.eq(g);
                    b.find(".ma").eq(0).click()
                }
            }
        })
    },
    doSolve: function() {
        var b = this.query;
        SYMBOLAB.params.query = b;
        if (b == "") {
            SYMBOLAB.inputBox().mathquill("latex", this.query);
            SYMBOLAB.promptError("Cannot understand this query, please try a different query.");
            return
        }
        var a = prepareQueryForMathQuill(b);
        if (SYPAD != undefined) {
            SYPAD.inputBox().mathquill("latex", a)
        }
        // SYSTEPS.updateStepsPlot(false, this.page);
        $(".show-hide-plot").text("« " + i18n("hide plot"));
        $("#steps-container").show();
        $("#steps-container").find(".mathquill-embedded-latex").mathquill("redraw")
    },
    switchPad: function(a) {
        if (a.indexOf(i18n("full pad")) >= 0) {
            symbolab_log("Pad", "switch", "full pad");
            $(".codepad-container").find(".mathquill-embedded-latex:not(.mathquill-rendered-math)").mathquill();
            $(".codepad-container").show();
            $(".codepad-container-small").hide();
            $(".solution-codepad-header span").html("« " + i18n("compact pad"));
            if (SYPAD != undefined) {
                SYPAD.switchPad($(".pad-toolbar-basic"))
            }
            $(".codepad-container").mathquill("redraw")
        } else {
            symbolab_log("Pad", "switch", "compact pad");
            $(".codepad-container").hide();
            $("#chemistryTable2").hide();
            $(".codepad-container-small").show();
            $("#widgetPad").show();
            $("#Compact").show();
            $(".solution-codepad-header span").html(i18n("full pad") + " »")
        }
    },
    parseQueryParameters: function() {
        var a, b = /\+/g,
            e = /([^&=]+)=?([^&]*)/g,
            f = function(h) {
                return decodeURIComponent(h.replace(b, " "))
            },
            g = window.location.search.substring(1);
        while (a = e.exec(g)) {
            this.params[decodeURIComponent(a[1])] = decodeURIComponent(a[2])
        }
    },
    doStructuredSearch: function() {
        query = $("#structured_subtopic").text() + ", find " + $(".selectedWhat").text() + ", given ";
        $(".givenDiv:visible .oneGiven").each(function() {
            var b = $(this).find(".givenLabel").text();
            var a = $(this).find(".mathquill-editable").mathquill("latex");
            if (!a) {
                a = "0"
            }
            var e = $(this).find(".chosen").text();
            query += b + "=" + a + e + ","
        });
        query = query.replace(/,$/, "");
        window.location = "/solver/" + this.page + "/" + encodeURIComponent(query)
    },
    doConversionSearch: function() {
        query = "convert " + $("#convInput").mathquill("latex") + " " + $("#convertFrom .same-as-selected").data("group") + " to " + $("#convertTo .same-as-selected").data("group");
        query = query.replace(/,$/, "");
        window.location = "/solver/" + this.page + "/" + encodeURIComponent(query)
    },
    populateGivenStructure: function() {
        if (!this.query) {
            return
        }
        var m = this;
        $(".givenDiv .mathquill-editable").mathquill("latex", "");
        var g = /.+?, find (.+?), given (.+)/;
        m.structuredWhat = this.query.match(g)[1];
        $(".structuredWhat").filter(function() {
            return ($(this).text() === m.structuredWhat)
        }).click();
        var a = this.query.match(g)[2];
        var f = a.split(",");
        this.fixGivenArray(f);
        var j = {};
        $(".givenDiv:visible .oneGiven .typeTD").removeClass("chosen");
        for (var b = 0; b < f.length; b++) {
            var e = f[b];
            if (e != "") {
                var l = e.match(/(.+?)=.*/)[1];
                var h = e.match(/.+?=(.*)/)[1];
                $(".givenDiv:visible .oneGiven").eq(b).find(".typeTD").each(function() {
                    var n = $(this).text();
                    if (new RegExp("[^a-z]" + n + "$").test(h)) {
                        h = h.replace(n, "");
                        $(this).addClass("chosen");
                        return false
                    }
                });
                $(".givenDiv:visible .mathquill-editable").eq(b).mathquill("latex", h)
            }
        }
    },
    populateConversions: function() {
        var a = this;
        if (!a.query) {
            groupSelectSelected($("#convertFrom .select-items div").eq(0));
            groupSelectSelected($("#convertTo .select-items div").eq(1));
            return
        }
        var b = /^convert (.+?)([a-z]+?) to ([a-z]+?)$/;
        var e = a.query.match(b)[1];
        $("#convInput").mathquill("latex", a.query.match(b)[1]);
        groupSelectSelected($("#convertFrom .select-items div[data-group=" + a.query.match(b)[2] + "]"));
        groupSelectSelected($("#convertTo .select-items div[data-group=" + a.query.match(b)[3] + "]"))
    },
    fixGivenArray: function(e) {
        for (var b = 0; b < e.length; b++) {
            var a = e[b];
            if (a == "") {
                continue
            }
            if (a.indexOf("=") < 0) {
                e[b - 1] = e[b - 1] + "," + a;
                e.splice(b, 1);
                b--
            }
        }
    },
    installBehavior: function() {
        var a = this;
        if (isUserLoggedIn() && a.subscribed == true) {
            $("#click-capture").addClass("click-capture-subscribed")
        }
        $("body").on("click", "#click-capture", function() {
            if (!isUserLoggedIn() || _.subscribed == false) {
                showSignUpSubscribe("Solver\tVerify");
                return false
            }
        });
        $(".nl-topSubMenu a").click(function() {
            syMenu("Top", $(this).attr("href"))
        });
        $(".nl-leftMenu").click(function() {
            syMenu("Left", $(this).attr("href"))
        });
        var b = a.subject;
        if (b == "") {
            b = "algebra"
        }
        var e = a.page;
        if (e == "") {
            e = "equation-calculator"
        }
        $(".interPageLink").click(function(f) {
            symbolab_log("Solutions", "PageLinkClick", $(f.currentTarget).text())
        });
        if (localStorage.getItem("settings.pad") == "fullPad") {
            $(".codepad-container").show();
            $("#widgetPad").hide()
        } else {
            $(".codepad-container").hide();
            $("#widgetPad").show()
        }
        $(".btn-custom.search").text(i18n("go button"));
        $("#fullPadLink").click(function(f) {
            a.switchPad(f.currentTarget.innerHTML);
            if (!isUserLoggedIn()) {
                createSignupTooltipOnly($("#fullPadLink"), "#fullPadLink", "SolverPadSwitch", i18n("js.to set your preferred pad"), "top")
            } else {
                showPointOfInterest("#fullPadLink", i18n("js.set preferred pad here"))
            }
        });
        $("button.structured_search").click(function(f) {
            a.doStructuredSearch()
        });
        $("button.convert_search").click(function(f) {
            a.doConversionSearch()
        });
        $("#verify-input").unbind("keyup").keyup(function(g) {
            var f = (g.charCode) ? g.charCode : g.keyCode;
            if (f === 13) {
                a.verify($(this).parent().find("button"), "SolutionPage", a.query)
            }
        });
        $(".verify-button").click(function(f) {
            a.verify($(this), "SolutionPage", a.query)
        });
        $(".structuredWhat").click(function() {
            $(".structuredWhat").removeClass("selectedWhat");
            $(this).addClass("selectedWhat");
            var h = $(this).text();
            $(".givenDiv").hide();
            var g = $(this).attr("data");
            $(g).show();
            $(g).find(".mathquill-editable").eq(0).focus();
            $(g).find(".mathquill-editable").each(function() {
                var j = $(this).attr("placeholder");
                if (j) {
                    $(this).mathquill("placeholder", j)
                }
            });
            var f = $(g).find(".hidden-image").text();
            if (f) {
                $("#structuredTop .structured_image").attr("src", f)
            }
            $("#multipleSolutions").toggle(h === a.structuredWhat)
        });
        $(".typeTD").click(function() {
            $(this).siblings().removeClass("chosen");
            $(this).addClass("chosen")
        });
        $(".sprite_pad_input.structured").tooltipster({
            theme: "tooltipster-light",
            trigger: "click",
            arrow: false,
            side: "top",
            functionPosition: function(g, h, f) {
                f.coord.left -= 150;
                return f
            },
            interactive: true,
            functionBefore: function(f, g) {
                var h = $('<table id="buttonsTable" class="noselect"><tbody><tr><td class="padButton new-pad-button font16" data-append="^" data-moveleft="1"><span class="mathquill-embedded-latex">x^{\\msquare}</span></td><td class="padButton new-pad-button font16" data-append="_" data-moveleft="1"><span class="mathquill-embedded-latex">x_{\\msquare}</span></td><td class="padButton new-pad-button font16" data-append="\\frac{}{}" data-moveleft="2"><span class="mathquill-embedded-latex">\\frac{\\msquare}{\\msquare}</span></td><td class="padButton new-pad-button font16" data-append="\\sqrt" data-moveleft="1"><span class="mathquill-embedded-latex">\\sqrt{\\square}</span></td><td class="padButton new-pad-button font16" data-append="\\pi" data-moveleft="0"><span class="mathquill-embedded-latex">\\pi</span></td></tr></tbody></table>');
                h.find(".mathquill-embedded-latex").mathquill();
                if (SYPAD != undefined) {
                    SYPAD.activeInputBox = $(g.origin).parents(".givenInput").find(".mathquill-editable")
                }
                f.content(h);
                $(g.origin).removeClass("sprite_pad_input");
                $(g.origin).addClass("sprite_pad_input_green")
            },
            functionAfter: function(f, g) {
                $(g.origin).addClass("sprite_pad_input");
                $(g.origin).removeClass("sprite_pad_input_green")
            }
        });
        $(".sprite_pad_input.converters").tooltipster({
            theme: "tooltipster-light",
            trigger: "click",
            arrow: false,
            side: "top",
            interactive: true,
            functionBefore: function(f, g) {
                var h = $('<table id="buttonsTable" class="noselect"><tbody><tr><td class="padButton new-pad-button font16" data-append="^" data-moveleft="1"><span class="mathquill-embedded-latex">x^{\\msquare}</span></td><td class="padButton new-pad-button font16" data-append="\\frac{}{}" data-moveleft="2"><span class="mathquill-embedded-latex">\\frac{\\msquare}{\\msquare}</span></td><td class="padButton new-pad-button font16" data-append="\\sqrt" data-moveleft="1"><span class="mathquill-embedded-latex">\\sqrt{\\square}</span></td></tr></tbody></table>');
                h.find(".mathquill-embedded-latex").mathquill();
                h.find(".padButton").click(function() {
                    SYPAD.padButtonClick(this)
                });
                if (SYPAD != undefined) {
                    SYPAD.activeInputBox = $(g.origin).parents(".givenInput").find(".mathquill-editable")
                }
                f.content(h);
                $(g.origin).removeClass("sprite_pad_input");
                $(g.origin).addClass("sprite_pad_input_green")
            },
            functionAfter: function(f, g) {
                $(g.origin).addClass("sprite_pad_input");
                $(g.origin).removeClass("sprite_pad_input_green")
            }
        });
        $(".ma").click(function(g) {
            var f = g.currentTarget;
            var h = f.childNodes[0];
            var j = false;
            if (h.src.indexOf("arrow_right.png") > 0) {
                j = true
            }
            $(f).closest("ul").eq(0).find("ul").hide();
            $(f).closest("ul").eq(0).find("img").attr("src", "/public/img/arrow_right.png");
            if (j) {
                h.src = h.src.replace(/arrow_right/, "arrow_down");
                $(f).parent().find("ul").eq(0).removeClass("hide");
                $(f).parent().find("ul").eq(0).slideToggle(300)
            }
        });
        $("body").on("click", ".nl-notesFav", function() {
            var g = $(this);
            if (isUserLoggedIn()) {
                if (g.hasClass("nl-notesFavSaved")) {
                    $.when(_.deleteNote(SOLUTIONS.query)).done(function() {
                        g.toggleClass("nl-notesFavSaved");
                        symbolab_log("Solutions", "FavoriteDelete", SOLUTIONS.query)
                    })
                } else {
                    var f = _.saveSolutionNote(SOLUTIONS.query, _.stepsRes.topic);
                    $.when(f).done(function(h) {
                        if (h && subscribed) {
                            showPointOfInterest(".nl-notesFav", h, {
                                onDismiss: function() {}
                            })
                        } else {
                            if (h) {
                                createUpgradeTooltip(".nl-notesFav", "SolverSaveNote", h)
                            } else {
                                g.toggleClass("nl-notesFavSaved")
                            }
                        }
                    })
                }
            } else {
                createSignupTooltip(".nl-notesFav ", "SolverSaveNote", i18n("to save notes and more"))
            }
            symbolab_log("Solutions", "SaveClicked", null, false, SOLUTIONS.query)
        });
        $("body").off("click", "#PlotLink, #ExamplesLink").on("click", "#PlotLink, #ExamplesLink", function(f) {
            f.preventDefault();
            var g = $(this).attr("href");
            $(g).get(0).scrollIntoView({
                behavior: "smooth",
                block: "start",
                inline: "start"
            })
        })
    },
    verify: function(e, a, f) {
        var b = this;
        if (b.verifying) {
            return
        }
        b.verifying = true;
        e.parent().find(".nl-answerCaption").hide();
        e.parent().find(".nl-answerCaption.not-ready").show();
        $.ajax({
            type: "GET",
            url: "/api/verifySolution",
            beforeSend: authorizeAjaxWithSyPubToken,
            data: {
                problem: f,
                solution: e.parent().find("#verify-input").mathquill("latex"),
                or: a
            },
            success: function(g) {
                e.parent().find(".nl-answerCaption").hide();
                if (g.correct) {
                    e.parent().find(".nl-answerCaption.nl-greenText").show()
                } else {
                    if (g.partiallyCorrect) {
                        e.parent().find(".nl-answerCaption.nl-goldText span").eq(0).text(g.userMessage);
                        e.parent().find(".nl-answerCaption.nl-goldText").show()
                    } else {
                        e.parent().find(".nl-answerCaption.nl-redText").show()
                    }
                }
            },
            error: function(g) {
                e.parent().find(".nl-answerCaption").hide();
                e.parent().find(".nl-answerCaption.nl-redText").show()
            },
            complete: function() {
                b.verifying = false
            }
        })
    }
};
(function(f) {
    var b = {};
    b.pos = f.extend(["top", "bottom", "left", "right"], {
        camel: ["Top", "Bottom", "Left", "Right"]
    });
    b.size = f.extend(["height", "width"], {
        camel: ["Height", "Width"]
    });
    b.getRelativeNames = function(j) {
        var h = {
            pos: {
                o: j,
                f: (j % 2 == 0) ? j + 1 : j - 1,
                p1: (j % 2 == 0) ? j : j - 1,
                p2: (j % 2 == 0) ? j + 1 : j,
                c1: (j < 2) ? 2 : 0,
                c2: (j < 2) ? 3 : 1
            },
            size: {
                p: (j < 2) ? 0 : 1,
                c: (j < 2) ? 1 : 0
            }
        };
        var n = {};
        for (var m in h) {
            if (!n[m]) {
                n[m] = {}
            }
            for (var l in h[m]) {
                n[m][l] = b[m][h[m][l]];
                if (!n.camel) {
                    n.camel = {}
                }
                if (!n.camel[m]) {
                    n.camel[m] = {}
                }
                n.camel[m][l] = b[m].camel[h[m][l]]
            }
        }
        n.isTopLeft = (n.pos.o == n.pos.p1);
        return n
    };

    function g() {
        this.initialize.apply(this, arguments)
    }(function() {
        var h = {
            setBorder: function(n, m) {
                return function(o) {
                    this.$.css("border-" + n.toLowerCase() + "-width", o + "px");
                    this["border" + n] = o;
                    return (this.isActive) ? j(this, m) : this
                }
            },
            setPosition: function(n, m) {
                return function(o) {
                    this.$.css(n.toLowerCase(), o + "px");
                    this[n.toLowerCase()] = o;
                    return (this.isActive) ? j(this, m) : this
                }
            }
        };
        g.prototype = {
            initialize: function(m) {
                this.$ = m;
                f.extend(true, this, this.$.offset(), {
                    center: {},
                    inner: {
                        center: {}
                    }
                });
                for (var n = 0; n < b.pos.length; n++) {
                    this["border" + b.pos.camel[n]] = parseInt(this.$.css("border-" + b.pos[n] + "-width")) || 0
                }
                this.active()
            },
            active: function() {
                this.isActive = true;
                j(this);
                return this
            },
            inactive: function() {
                this.isActive = false;
                return this
            }
        };
        for (var l = 0; l < b.pos.length; l++) {
            g.prototype["setBorder" + b.pos.camel[l]] = h.setBorder(b.pos.camel[l], (l < 2));
            if (l % 2 == 0) {
                g.prototype["set" + b.pos.camel[l]] = h.setPosition(b.pos.camel[l], (l < 2))
            }
        }

        function j(o, p) {
            if (p == undefined) {
                j(o, true);
                return j(o, false)
            }
            var n = b.getRelativeNames((p) ? 0 : 2);
            o[n.size.p] = o.$["outer" + n.camel.size.p]();
            o[n.pos.f] = o[n.pos.o] + o[n.size.p];
            o.center[n.pos.o] = o[n.pos.o] + o[n.size.p] / 2;
            o.inner[n.pos.o] = o[n.pos.o] + o["border" + n.camel.pos.o];
            o.inner[n.size.p] = o.$["inner" + n.camel.size.p]();
            o.inner[n.pos.f] = o.inner[n.pos.o] + o.inner[n.size.p];
            o.inner.center[n.pos.o] = o.inner[n.pos.f] + o.inner[n.size.p] / 2;
            return o
        }
    })();

    function a(j, r, t) {
        r.stop(true, true);
        var p, u, q = {
                position: "absolute",
                height: "0",
                width: "0",
                border: "solid 0 transparent"
            },
            o = new g(j),
            s = new g(r);
        s.setTop(-t.offsetY + ((t.position && t.position.indexOf("top") >= 0) ? o.top - s.height : ((t.position && t.position.indexOf("bottom") >= 0) ? o.bottom : o.center.top - s.height / 2)));
        s.setLeft(t.offsetX + ((t.position && t.position.indexOf("left") >= 0) ? o.left - s.width : ((t.position && t.position.indexOf("right") >= 0) ? o.right : o.center.left - s.width / 2)));
        if (t.tipSize > 0) {
            if (r.data("outerTip")) {
                r.data("outerTip").remove();
                r.removeData("outerTip")
            }
            if (r.data("innerTip")) {
                r.data("innerTip").remove();
                r.removeData("innerTip")
            }
            p = new g(f("<div>").css(q).appendTo(r));
            u = new g(f("<div>").css(q).appendTo(r));
            var l;
            for (var n = 0; n < b.pos.length; n++) {
                l = b.getRelativeNames(n);
                if (s.center[l.pos.c1] >= o[l.pos.c1] && s.center[l.pos.c1] <= o[l.pos.c2]) {
                    if (n % 2 == 0) {
                        if (s[l.pos.o] >= o[l.pos.o] && s[l.pos.f] >= o[l.pos.f]) {
                            break
                        }
                    } else {
                        if (s[l.pos.o] <= o[l.pos.o] && s[l.pos.f] <= o[l.pos.f]) {
                            break
                        }
                    }
                }
                l = null
            }
            if (l) {
                s["set" + l.camel.pos.p1](s[l.pos.p1] + ((l.isTopLeft) ? 1 : -1) * (t.tipSize - s["border" + l.camel.pos.o]));
                h(s, p, l, t.tipSize, r.css("border-" + l.pos.o + "-color"));
                h(s, u, l, t.tipSize - 2 * s["border" + l.camel.pos.o], r.css("background-color"));
                r.data("outerTip", p.$).data("innerTip", u.$)
            } else {
                f.each([p.$, u.$], function() {
                    this.remove()
                })
            }
        }

        function h(A, z, w, y, x) {
            var v = Math.round(y / 1.7320508);
            z.inactive()["setBorder" + w.camel.pos.f](y)["setBorder" + w.camel.pos.c1](v)["setBorder" + w.camel.pos.c2](v)["set" + w.camel.pos.p1]((w.isTopLeft) ? -y : A.inner[w.size.p])["set" + w.camel.pos.c1](A.inner[w.size.c] / 2 - v).active().$.css("border-" + w.pos.f + "-color", x)
        }
    }

    function e(j, l) {
        var h = j.data("balloon") && j.data("balloon").get(0);
        return !(h && (h === l.relatedTarget || f.contains(h, l.relatedTarget)))
    }
    f.fn.balloon = function(h) {
        return this.one("mouseenter", function(n) {
            var j = f(this),
                l = this;
            var m = j.unbind("mouseenter", arguments.callee).showBalloon(h).mouseenter(function(o) {
                e(j, o) && j.showBalloon()
            }).data("balloon");
            if (m) {
                m.mouseleave(function(o) {
                    if (l === o.relatedTarget || f.contains(l, o.relatedTarget)) {
                        return
                    }
                    j.hideBalloon()
                }).mouseenter(function(o) {
                    m.stop(true, true);
                    j.showBalloon()
                })
            }
        }).mouseleave(function(l) {
            var j = f(this);
            e(j, l) && j.hideBalloon()
        })
    };
    f.fn.showBalloon = function(j) {
        var h, l, m;
        if (j || !this.data("options")) {
            if (f.balloon.defaults.css === null) {
                f.balloon.defaults.css = {}
            }
            this.data("options", f.extend(true, {}, f.balloon.defaults, j || {}))
        }
        j = this.data("options");
        return this.each(function() {
            var n, o;
            h = f(this);
            (m = h.data("offTimer")) && clearTimeout(m);
            o = f.isFunction(j.contents) ? j.contents() : (j.contents || (j.contents = h.attr("title") || h.attr("alt")));
            n = !(l = h.data("balloon"));
            if (n) {
                l = f("<div>").append(o)
            }
            if (!j.url && (!l || l.html() == "")) {
                return
            }
            if (!n && o && o != l.html()) {
                l.empty().append(o)
            }
            h.removeAttr("title");
            if (j.url) {
                l.load(f.isFunction(j.url) ? j.url(this) : j.url, function(p, q, r) {
                    if (j.ajaxComplete) {
                        j.ajaxComplete(p, q, r)
                    }
                    a(h, l, j)
                })
            }
            if (n) {
                l.addClass(j.classname).css(j.css || {}).css({
                    visibility: "hidden",
                    position: "absolute"
                }).appendTo("body");
                h.data("balloon", l);
                a(h, l, j);
                l.hide().css("visibility", "visible")
            } else {
                a(h, l, j)
            }
            if (j.showAnimation) {
                j.showAnimation.apply(l.stop(true, true), [j.showDuration, j.showComplete])
            } else {
                l.show(j.showDuration, function() {
                    if (this.style.removeAttribute) {
                        this.style.removeAttribute("filter")
                    }
                    j.showComplete && j.showComplete.apply(l)
                })
            }
        })
    };
    f.fn.hideBalloon = function() {
        var j = this.data("options"),
            h, l;
        if (!this.data("balloon")) {
            return this
        }
        return this.each(function() {
            var m = f(this);
            (h = m.data("onTimer")) && clearTimeout(h);
            (l = m.data("offTimer")) && clearTimeout(l);
            m.data("offTimer", setTimeout(function() {
                var n = m.data("balloon");
                if (j.hideAnimation) {
                    n && j.hideAnimation.apply(n.stop(true, true), [j.hideDuration, j.hideComplete])
                } else {
                    n && n.stop(true, true).hide(j.hideDuration, j.hideComplete)
                }
            }, j.minLifetime))
        })
    };
    f.balloon = {
        defaults: {
            contents: null,
            url: null,
            ajaxComplete: null,
            classname: null,
            position: "top",
            offsetX: 0,
            offsetY: 0,
            tipSize: 12,
            delay: 0,
            minLifetime: 200,
            showDuration: 100,
            showAnimation: null,
            hideDuration: 80,
            hideAnimation: function(h) {
                this.fadeOut(h)
            },
            showComplete: null,
            hideComplete: null,
            css: {
                minWidth: "20px",
                padding: "5px",
                borderRadius: "6px",
                border: "solid 1px #777",
                boxShadow: "4px 4px 4px #555",
                color: "#666",
                backgroundColor: "#efefef",
                opacity: (f.support.opacity) ? "0.85" : null,
                zIndex: "32767",
                textAlign: "left"
            }
        }
    }
})(jQuery);

function isInteger(a) {
    return (a ^ 0) === a
}

function calcEps() {
    var e, b, a;
    e = 1;
    do {
        a = e;
        e /= 2;
        b = 1 + e
    } while (b > 1);
    return a
}
Math.log10 = function(a) {
    return Math.log(a) / Math.log(10)
};
SyCalc = new SyCalc;

function SyPlot(e, g, b) {
    this.graphJQ = $(e);
    this.graph = this.graphJQ.get(0);
    this.width = this.graphJQ.width();
    this.plotInfo = g;
    this.height = this.graphJQ.height();
    this.charHeight = 8;
    this.startDrag = {
        x: 0,
        y: 0
    };
    this.mouseButton = 0;
    this.canvasX = this.graph.offsetLeft;
    this.canvasY = this.graph.offsetTop;
    this.quality = 2;
    this.variable = this.plotInfo ? this.plotInfo.variable : "x";
    this.zoomFactor = 0.2;
    this.allFuncVals = [];
    this.funcsXpos = [];
    this.funcsYpos = [];
    this.funcXvals = [];
    this.drawFuncs = [];
    this.balloonShowed = false;
    this.tablePoints = [];
    this.tablePointsText = [];
    this.pointsDraw = [];
    this.pointsDrawAttr = [];
    this.pointsDrawText = [];
    this.functionsInfo = [];
    this.eps = calcEps();
    this.logActivityType = "GraphingCalculator";
    var a = this;
    this.options = $.extend({}, {
        showSettings: false,
        showZoom: false,
        showBalloons: false,
        lineWidth: 1,
        pixelRatio: 1,
        proximity: 10,
        mouseEvents: true,
        yBalloonOffset: 0
    }, b);
    sy_graphSettings.init(this.options, this);
    this.float_fix = function(h) {
        return Math.round(h * 10000000 + 5e-8) / 10000000
    };
    this.roundCoord = function(h) {
        return Math.abs(h) < 0.1 ? h.toPrecision(2) : h.toFixed(2)
    };
    this.getProportionalYValue = function(j) {
        var h = j / this.width;
        return this.height * h
    };
    this.init = function(l, u, j) {
        this.allFuncs = {};
        var r = this;
        if (this.graph.getContext) {
            this.ctx = this.graph.getContext("2d");
            this.ctx.lineWidth = 2;
            this.adjustedWidth = l * j;
            this.adjustedHeight = u * j;
            this.graphJQ.attr("height", this.adjustedHeight);
            this.graphJQ.attr("width", this.adjustedWidth);
            this.ctx.scale(j, j);
            var h = -10,
                o = 10,
                s = -10,
                m = 10;
            var p = this.plotInfo ? this.plotInfo.localBoundingBox : undefined;
            if (p) {
                h = Math.max(p.xMin, -1000000);
                o = Math.min(p.xMax, 1000000);
                s = Math.max(p.yMin, -1000000);
                m = Math.min(p.yMax, 1000000)
            }
            if (this.plotInfo && this.plotInfo.aspectRatio != null) {
                var n = l / u / this.plotInfo.aspectRatio;
                var q = Math.abs(o - h) / 2;
                var t = Math.abs(m - s) / 2;
                var y = q / t;
                if (n < y) {
                    t = q / n
                } else {
                    q = t * n
                }
                var x = 0;
                if (n < y || h + q / 2 > 0 || o - q / 2 < 0) {
                    x = (o + h) / 2
                }
                var w = 0;
                if (n >= y || s + t / 2 > 0 || m - t / 2 < 0) {
                    w = (m + s) / 2
                }
                h = x - q;
                o = x + q;
                s = w - t;
                m = w + t
            }
            sy_graphSettings.defaultSettings.x1 = this.roundCoord(h);
            sy_graphSettings.defaultSettings.x2 = this.roundCoord(o);
            sy_graphSettings.defaultSettings.y1 = this.roundCoord(s);
            sy_graphSettings.defaultSettings.y2 = this.roundCoord(m);
            this.currCoord = {
                x1: h,
                x2: o,
                y1: s,
                y2: m
            };
            this.startCoord = this.copyCoord(this.currCoord);
            var v = this;
            if (this.options.mouseEvents) {
                this.graphJQ.unbind("mousemove").mousemove(function(D) {
                    if (v.mouseButton == 2) {
                        var C = v.funcsYpos[v.currentFunctionIndex];
                        var E = v.funcsXpos[v.currentFunctionIndex];
                        var G = D.pageX - $("canvas").offset().left;
                        var B = D.pageY - $("canvas").offset().top;
                        var A = v.findClosestPoint(G, B, E, C);
                        var z = this.roundCoord(v.getXvalue(A.x));
                        var F = this.roundCoord(v.getYvalue(A.y));
                        v.clearBalloons();
                        v.showBalloon(v.functionsInfo[v.currentFunctionIndex], G, B);
                        $(".plotBalloon span").eq(0).append("<p class='ballon-cord'>(" + z + "," + F + ")</p>");
                        v.ctx.drawImage(v.canvasImg, 0, 0);
                        v.ctx.beginPath();
                        v.ctx.fillStyle = v.plotInfo.funcsToDraw.funcs[v.currentFunctionIndex].attributes.color;
                        v.ctx.arc(A.x, A.y, 4, 0, Math.PI * 2, false);
                        v.ctx.fill();
                        return
                    }
                    if (v.mouseButton == 1) {
                        $("#sy_graph").css("cursor", "move");
                        if (window.location.href.indexOf("/graphing-calculator") >= 0) {
                            v.canvasX = $("canvas").offset().left;
                            v.canvasY = $("canvas").offset().top
                        } else {
                            v.canvasX = v.graph.offsetLeft;
                            v.canvasY = v.graph.offsetTop
                        }
                        var z = D.pageX - v.canvasX;
                        var F = D.pageY - v.canvasY;
                        v.movePlot(z - v.startDrag.x, F - v.startDrag.y);
                        v.startDrag.x = z;
                        v.startDrag.y = F;
                        return
                    }
                    if (window.location.href.indexOf("/graphing-calculator") >= 0) {
                        v.canvasX = $("canvas").offset().left;
                        v.canvasY = $("canvas").offset().top;
                        v.checkMove(D.pageX - v.canvasX, D.pageY - v.canvasY)
                    } else {
                        v.canvasX = v.graph.offsetLeft;
                        v.canvasY = v.graph.offsetTop;
                        v.checkMove(D.pageX - v.canvasX, D.pageY - v.canvasY)
                    }
                });
                this.graphJQ.unbind("mouseleave").mouseleave(function() {
                    if (v.mouseButton == 2) {
                        v.clearBalloons();
                        v.ctx.drawImage(v.canvasImg, 0, 0)
                    }
                    v.mouseButton = 0
                });
                this.graphJQ.unbind("mousedown").mousedown(function(A) {
                    v.mouseDown(A);
                    if (!v.plotInfo || !v.plotInfo.funcsToDraw || !v.plotInfo.funcsToDraw.funcs) {
                        v.mouseButton = 1;
                        return
                    }
                    var E = A.pageX - $("canvas").offset().left;
                    var L = A.pageY - $("canvas").offset().top;
                    var J = null,
                        K = null,
                        C = false;
                    for (var F in v.pointsDraw) {
                        K = v.getCoord(v.pointsDraw[F].x, v.pointsDraw[F].y);
                        if (v.isPointInProximity(E, L, K.x, K.y, 5)) {
                            var z = [];
                            if (v.currentFunctionIndex != undefined) {
                                z.push(v.currentFunctionIndex)
                            }
                            for (var F = 0; F < v.funcsYpos.length; F++) {
                                z.push(F)
                            }
                            var I = true;
                            for (var F = 0; F < z.length && I; F++) {
                                var G = v.funcsYpos[z[F]];
                                var H = v.funcsXpos[z[F]];
                                for (var B = 0; B < H.length; B++) {
                                    if (v.isPointInProximity(E, L, H[B], G[B], 10)) {
                                        v.currentFunctionIndex = z[F];
                                        I = false;
                                        break
                                    }
                                }
                            }
                            C = true;
                            break
                        }
                    }
                    var z = [];
                    if (v.currentFunctionIndex != undefined) {
                        z.push(v.currentFunctionIndex)
                    }
                    for (var D in v.funcsYpos) {
                        if (v.funcsYpos.hasOwnProperty(D)) {
                            z.push(D)
                        }
                    }
                    var I = true;
                    for (var F = 0; F < z.length && !C && I; F++) {
                        var G = v.funcsYpos[z[F]];
                        var H = v.funcsXpos[z[F]];
                        for (var B = 0; B < H.length; B++) {
                            if (v.isPointInProximity(E, L, H[B], G[B], 10)) {
                                K = v.findClosestPoint(E, L, H, G);
                                v.currentFunctionIndex = z[F];
                                J = {
                                    x: this.roundCoord(v.getXvalue(K.x)),
                                    y: this.roundCoord(v.getYvalue(K.y))
                                };
                                I = false;
                                break
                            }
                        }
                    }
                    if (C || J) {
                        v.mouseButton = 2;
                        v.canvasImg = new Image;
                        v.canvasImg.src = v.graphJQ[0].toDataURL();
                        v.ctx.beginPath();
                        v.ctx.fillStyle = v.plotInfo.funcsToDraw.funcs[v.currentFunctionIndex].attributes.color;
                        v.ctx.arc(K.x, K.y, 4, 0, Math.PI * 2, false);
                        v.ctx.fill();
                        if (!C) {
                            v.clearBalloons();
                            v.showBalloon(v.functionsInfo[v.currentFunctionIndex], E, L);
                            $(".plotBalloon span").eq(0).append("<p class='ballon-cord'>(" + J.x + "," + J.y + ")</p>")
                        }
                    } else {
                        v.mouseButton = 1
                    }
                });
                $("#graph").unbind("mouseup").mouseup(function(z) {
                    if (v.mouseButton == 2) {
                        v.ctx.drawImage(v.canvasImg, 0, 0);
                        $(".ballon-cord").remove()
                    }
                    v.mouseUp(z)
                });
                this.graphJQ.unbind("mouseup").mouseup(function(z) {
                    if (v.mouseButton == 2) {
                        v.ctx.drawImage(v.canvasImg, 0, 0);
                        $(".ballon-cord").remove();
                        v.canvasX = $("canvas").offset().left;
                        v.canvasY = $("canvas").offset().top;
                        v.checkMove(z.pageX - v.canvasX + 1, z.pageY - v.canvasY + 1)
                    }
                    v.mouseUp(z)
                })
            }
        } else {
            alert(i18n("js.Sorry, your browser is not supported."))
        }
    };
    this.mobileTouchPlot = function(h, j) {
        this.checkMove(h, j)
    };
    this.mobileMovePlot = function(j, h) {
        this.movePlot(j, h)
    };
    this.movePlot = function(j, h) {
        var l = this;
        var m = l.getScale();
        l.currCoord.x1 = l.currCoord.x1 - (j / m.x);
        l.currCoord.x2 = l.currCoord.x2 - (j / m.x);
        l.currCoord.y1 = l.currCoord.y1 + (h / m.y);
        l.currCoord.y2 = l.currCoord.y2 + (h / m.y);
        sy_graphSettings.updateCoordinates();
        l.checkResetNeeded(true);
        l.draw(false)
    };
    this.donePanning = function() {
        this.draw(true)
    };
    this.arbRound = function(h, j) {
        return Math.round(h / j) * j
    };
    this.arbFloor = function(h, j) {
        return Math.floor(h / j) * j
    };
    this.copyCoord = function(h) {
        return {
            x1: h.x1,
            x2: h.x2,
            y1: h.y1,
            y2: h.y2
        }
    };
    this.clearScreen = function() {
        this.ctx.fillStyle = "rgb(255,255,255)";
        this.ctx.fillRect(0, 0, this.width, this.height)
    };
    this.drawVerticalLine = function(j, h, m) {
        this.setCtxStyle(h);
        this.ctx.lineWidth = h.isAsymptote == true ? 1 : this.options.lineWidth;
        this.ctx.beginPath();
        var n = this.getCoord(j, this.currCoord.y2);
        var l = this.getCoord(j, this.currCoord.y1);
        this.ctx.moveTo(n.x, n.y);
        this.ctx.lineTo(l.x, l.y);
        this.ctx.stroke();
        this.defaultCtxStyle()
    };
    this.drawLineSegment = function(j) {
        this.setCtxStyle(j.attributes);
        this.ctx.beginPath();
        var l = this.getCoord(this.evalForm(j.p1x), this.evalForm(j.p1y));
        var h = this.getCoord(this.evalForm(j.p2x), this.evalForm(j.p2y));
        this.ctx.moveTo(l.x, l.y);
        this.ctx.lineTo(h.x, h.y);
        this.ctx.stroke();
        this.defaultCtxStyle()
    };
    this.adjustAttr = function(h) {
        if ("PURPLE" === h.color) {
            h.color = "#006666"
        }
        if ("PURPLE" === h.borderColor) {
            h.borderColor = "#006666"
        }
    };
    this.setCtxStyle = function(h) {
        this.adjustAttr(h);
        this.ctx.strokeStyle = h.color;
        if (h.lineType == "DASH") {
            this.ctx.setLineDash([5, 10]);
            this.ctx.lineWidth = 1
        } else {
            if (h.lineType == "DOT") {
                this.ctx.setLineDash([2, 4]);
                this.ctx.lineWidth = 2
            } else {
                if (h.lineType == "BOLD") {
                    this.ctx.lineWidth = 4
                } else {
                    if (h.lineType == "NORMAL") {
                        this.ctx.lineWidth = 1
                    }
                }
            }
        }
    };
    this.defaultCtxStyle = function() {
        this.ctx.setLineDash([]);
        this.ctx.lineWidth = 1;
        this.ctx.strokeStyle = "#000000"
    };
    this.drawPoint = function(h, l, j, n) {
        var m = this.getCoord(h, l);
        this.ctx.beginPath();
        this.ctx.fillStyle = j;
        if (n) {
            this.ctx.strokeStyle = n;
            this.ctx.arc(m.x, m.y, 3.3, 0, Math.PI * 2, false);
            this.ctx.fill();
            this.ctx.stroke()
        } else {
            this.ctx.arc(m.x, m.y, 3, 0, Math.PI * 2, false);
            this.ctx.fill()
        }
    };
    this.drawGrid = function() {
        this.clearScreen();
        var E = this.currCoord.x1 = parseFloat(sy_graphSettings.cur().x1);
        var C = this.currCoord.x2 = parseFloat(sy_graphSettings.cur().x2);
        var l = this.currCoord.y1 = parseFloat(sy_graphSettings.cur().y1);
        var j = this.currCoord.y2 = parseFloat(sy_graphSettings.cur().y2);
        var n = C - E;
        var p = j - l;
        var z = {
            x: 0.015 * this.width,
            y: 0.015 * this.height
        };
        var y = n / this.width;
        var H = p / this.height;
        for (i = 1e-12, c = 0;
            (n / i > z.x - 1) && (i < Infinity); c++) {
            if (c % 3 == 1) {
                i *= 2.5
            } else {
                i *= 2
            }
        }
        var q = this.float_fix(i);
        var K = this.float_fix(i / 5);
        for (i = 1e-12, c = 0; p / i > z.y - 1; c++) {
            if (c % 3 == 1) {
                i *= 2.5
            } else {
                i *= 2
            }
        }
        var o = this.float_fix(i);
        var J = this.float_fix(i / 5);
        this.ctx.font = "10pt 'open sans'";
        this.ctx.textAlign = "center";
        var m = yaxis = null;
        var G = this.arbFloor(E, q);
        var D = this.arbFloor(l, o);
        var A = this.charHeight * 1.5;
        var x = -1;
        G = this.float_fix(G);
        D = this.float_fix(D);
        if (j >= 0 && l <= 0) {
            A = this.height - ((0 - l) / (j - l)) * this.height + (this.charHeight * 1.5)
        } else {
            if (l > 0) {
                A = this.height - 5
            }
        }
        if (A > this.height - (this.charHeight / 2)) {
            A = this.height - 5
        }
        if (C >= 0 && E <= 0) {
            x = ((0 - E) / (C - E)) * this.width - 2
        } else {
            if (C < 0) {
                x = this.width - 6
            }
        }
        if (x < (this.ctx.measureText(D).width + 1)) {
            x = -1
        }
        var h = String(G).length + 3;
        var s = G;
        i = 0;
        while (i < 10000) {
            i++;
            xpos = ((G - E) / (C - E)) * this.width;
            if (xpos - 0.5 > this.width + 1 || isNaN(xpos)) {
                break
            }
            if (xpos < 0) {
                G += K;
                continue
            }
            G = this.float_fix(G);
            if (G == 0) {
                m = xpos
            }
            var F = isInteger(this.float_fix((s - G) / q));
            this.ctx.fillStyle = F ? "#bcbcbc" : "#eaeaea";
            this.ctx.fillRect(xpos - 0.5, 0, 1, this.height);
            this.ctx.fillStyle = "rgb(0,0,0)";
            if (G != 0 && F) {
                var r = this.ctx.measureText(G).width;
                if (xpos + r * 0.5 > this.width) {
                    xpos = this.width - r * 0.5 + 1
                } else {
                    if (xpos - r * 0.5 < 0) {
                        xpos = r * 0.5 + 1
                    }
                }
                this.ctx.fillText(G, xpos, A)
            }
            G += K
        }
        this.ctx.textAlign = "right";
        h = String(D).length + 3;
        var w = D;
        i = 0;
        while (true) {
            ypos = this.height - ((D - l) / (j - l)) * this.height;
            if (ypos - 0.5 > this.height + 1) {
                D += J;
                continue
            }
            if (ypos < 0 || isNaN(ypos)) {
                break
            }
            D = this.float_fix(D);
            if (D == 0) {
                yaxis = ypos
            }
            var F = isInteger(this.float_fix((w - D) / o));
            this.ctx.fillStyle = F ? "#bcbcbc" : "#eaeaea";
            this.ctx.fillRect(0, ypos - 0.5, this.width, 1);
            this.ctx.fillStyle = "black";
            if (D != 0 && F) {
                var I = this.ctx.measureText(D).width;
                if (ypos + (this.charHeight / 2) > this.height) {
                    ypos = this.height - (this.charHeight / 2) - 1
                }
                if (ypos - 4 < 0) {
                    ypos = 4
                }
                var t = x;
                if (x == -1) {
                    t = I + 1
                }
                this.ctx.fillText(D, t, ypos + 3)
            }
            D += J;
            i++
        }
        if (this.plotInfo && this.plotInfo.funcsToDraw) {
            for (k in this.plotInfo.funcsToDraw.funcs) {
                var B = this.plotInfo.funcsToDraw.funcs[k];
                var v = B.attributes;
                if (v && v.lineType && v.lineType !== "NORMAL") {
                    if (B.evalFormula === "y=0") {
                        yaxis = null
                    } else {
                        if (B.evalFormula === "x=0") {
                            m = null
                        }
                    }
                }
            }
        }
        if (m) {
            this.ctx.fillRect(m - 0.5, 0, 1, this.height);
            if (sy_graphSettings.cur() && sy_graphSettings.cur().yLabel) {
                var u = this.ctx.measureText(sy_graphSettings.cur().yLabel).width;
                this.ctx.save();
                this.ctx.translate(m + 15, 15);
                this.ctx.rotate(90 * Math.PI / 180);
                this.ctx.fillText(sy_graphSettings.cur().yLabel, u, 4);
                this.ctx.restore()
            }
        }
        if (yaxis) {
            this.ctx.fillRect(0, yaxis - 0.5, this.width, 1);
            if (sy_graphSettings.cur() && sy_graphSettings.cur().xLabel) {
                this.ctx.fillText(sy_graphSettings.cur().xLabel, this.width - 15, yaxis - 15)
            }
        }
    };
    this.minYpos = function() {
        return 0
    };
    this.maxYpos = function() {
        return this.height
    };
    this.minXpos = function() {
        return 0
    };
    this.maxXpos = function() {
        return this.width
    };
    this.inCanvasY = function(h) {
        return h >= this.minYpos() && h <= this.maxYpos()
    };
    this.inCanvasX = function(h) {
        return h >= this.minXpos() && h <= this.maxXpos()
    };
    this.getCoord = function(h, m) {
        var j = this.getXCoord(h);
        var l = this.getYCoord(m);
        return {
            x: j,
            y: l
        }
    };
    this.getXCoord = function(h) {
        h = this.roundInfinities(h);
        return ((h - this.currCoord.x1) / (this.currCoord.x2 - this.currCoord.x1)) * this.width
    };
    this.getYCoord = function(h) {
        h = this.roundInfinities(h);
        return this.height - ((h - this.currCoord.y1) / (this.currCoord.y2 - this.currCoord.y1)) * this.height
    };
    this.roundInfinities = function(h) {
        if (h == "-Infinity" || h == "-\\infty ") {
            return -10000000000
        } else {
            if (h == "Infinity" || h == "\\infty ") {
                return 10000000000
            }
        }
        return parseFloat(h)
    };
    this.getYInCanvas = function(h) {
        if (h < this.minYpos()) {
            return this.minYpos()
        } else {
            if (h > this.maxYpos()) {
                return this.maxYpos()
            } else {
                return h
            }
        }
    };
    this.getXInCanvas = function(h) {
        if (h < this.minXpos()) {
            return this.minXpos()
        } else {
            if (h > this.maxXpos()) {
                return this.maxXpos()
            } else {
                return h
            }
        }
    };
    this.getValue = function(h, j) {
        return {
            x: this.getXvalue(h),
            y: this.getYvalue(j)
        }
    };
    this.getXvalue = function(h) {
        var l = this.getScale();
        var j = h / l.x + this.currCoord.x1;
        return j
    };
    this.getYvalue = function(l) {
        var h = this.getScale();
        var j = (this.height - l) / h.y + this.currCoord.y1;
        return j
    };
    this.roundToEdge = function(o, n, h, l, j) {
        var m = j >= l ? this.height : 0;
        n.push(h);
        o.push(m)
    };
    this.yposFromXpos = function(l, j) {
        var n = this.getScale();
        var h = j / n.x + this.currCoord.x1;
        var m = this.evalFunc(l, h);
        var o = this.height - ((m - this.currCoord.y1) * n.y);
        return o
    };
    this.inDomain = function(j, h) {
        if (j == null) {
            return false
        }
        if (j.xmin != null) {
            if (h < j.xmin) {
                return false
            }
            if (j.xmax != null && h > j.xmax) {
                return false
            }
            return true
        }
        if (j.xmax != null && h > j.xmax) {
            return false
        }
        return true
    };
    this.drawFunction = function(r, H, C) {
        if (!r) {
            return false
        }
        try {
            this.yposFromXpos(r, 0)
        } catch (q) {
            return false
        }
        var F = H.attributes;
        var O = this.getScale();
        var v = false;
        var n = 0;
        var t = 0;
        var M = 0;
        var s = -1;
        var l = -1;
        var u = [];
        var K = [];
        var x = [];
        var J = [];
        var h = [];
        var y = 1 / this.quality;
        var j = 0;
        var p = this.width + y;
        var o = 250;
        if (H.xmin != null) {
            var L = this.getXCoord(H.xmin);
            if (j < L) {
                j = L
            }
        }
        if (H.xmax != null) {
            var L = this.getXCoord(H.xmax);
            if (p > L) {
                p = L + y
            }
        }
        for (var m = j; m < p; m += y) {
            var B = x.length;
            var w = this.yposFromXpos(r, m);
            if (this.inCanvasY(w)) {
                if (v == false) {
                    if (B >= 0 && !isNaN(K[B - 1])) {
                        var I = this.yposFromXpos(r, m + y);
                        this.roundToEdge(K, x, m, I, w)
                    } else {
                        if (B >= 0 && isNaN(K[B - 1])) {
                            var P = x[B - 1];
                            for (var N = 0; N < (o - 1); ++N) {
                                P += y / o;
                                var A = this.yposFromXpos(r, P);
                                K.push(A);
                                x.push(P)
                            }
                        }
                    }
                } else {
                    var E = w - s;
                    var D = E > 0 ? -1 : (E < 0 ? 1 : 0);
                    if (n !== 0) {
                        if (D == n) {
                            t += Math.abs(w - s);
                            ++M
                        } else {
                            var z = Math.abs(w - s);
                            if (z > t && z > this.height / 1000 && M > 2) {
                                this.roundToEdge(K, x, x[B - 1], K[B - 2], K[B - 1]);
                                K.push(this.height + 1000);
                                x.push(m);
                                var I = this.yposFromXpos(r, m + y);
                                this.roundToEdge(K, x, m, I, w)
                            }
                            t = 0;
                            M = 0
                        }
                    }
                    n = D
                }
                v = true;
                s = w;
                l = m
            } else {
                if (v) {
                    if (!isNaN(w)) {
                        this.roundToEdge(K, x, x[B - 1], K[B - 2], K[B - 1])
                    } else {
                        if (B >= 0) {
                            var P = x[B - 1];
                            var A = null;
                            for (var N = 0; N < (o - 1); ++N) {
                                P += y / o;
                                if (isNaN(A)) {
                                    K.push(A);
                                    x.push(P)
                                } else {
                                    A = this.yposFromXpos(r, P);
                                    if (isNaN(A) && H.xmax != null && (m + y) > p) {
                                        K.push(this.getYCoord(this.evalFunc(r, H.xmax)));
                                        x.push(this.getXCoord(H.xmax))
                                    } else {
                                        K.push(A);
                                        x.push(P)
                                    }
                                }
                            }
                        }
                    }
                    v = false;
                    s = -1;
                    n = 0;
                    t = 0
                }
            }
            K.push(w);
            x.push(m);
            h.push(w);
            J.push(m)
        }
        this.allFuncVals[C] = h;
        this.funcsYpos[C] = K;
        this.funcsXpos[C] = x;
        this.funcXvals[C] = J;
        this.drawFuncs[C] = r;
        this.setCtxStyle(F);
        this.ctx.beginPath();
        this.ctx.lineWidth = F.isAsymptote == true ? 1 : this.options.lineWidth;
        for (var G = 0; G < K.length; ++G) {
            var w = K[G];
            var m = x[G];
            if (this.inCanvasY(w)) {
                if (v == false) {
                    this.ctx.beginPath();
                    this.ctx.moveTo(m, w)
                }
                this.ctx.lineTo(m, w);
                v = true
            } else {
                if (v) {
                    this.ctx.stroke();
                    v = false
                }
            }
        }
        this.ctx.stroke();
        this.defaultCtxStyle()
    };
    this.drawLines = function() {
        if (this.plotInfo && this.plotInfo.linesToDraw) {
            for (var h in this.plotInfo.linesToDraw) {
                var j = this.plotInfo.linesToDraw[h];
                this.drawLineSegment(j)
            }
        }
    };
    this.drawFunctions = function() {
        if (this.plotInfo && this.plotInfo.funcsToDraw) {
            for (var o in this.plotInfo.funcsToDraw.funcs) {
                var n = this.plotInfo.funcsToDraw.funcs[o];
                var p = n.evalFormula;
                var h = n.attributes;
                if (h.isAsymptote && sy_graphSettings.cur() && sy_graphSettings.cur().isDrawAsypmtotes.draw == false) {
                    continue
                }
                var q = n.displayFormula;
                for (var l in h.labels) {
                    q += "<br/>\\mathrm{" + h.labels[l] + "}"
                }
                this.functionsInfo.push(q);
                if (p.indexOf("y=") === 0) {
                    p = p.substring(2)
                }
                if (p.indexOf(this.variable + "=") === 0) {
                    p = p.substring(2);
                    p = SyCalc.parseEquation(p, true);
                    var r = SyParse.parse(p);
                    var m = SyParse.evaluate(r);
                    this.drawVerticalLine(m, h, o)
                } else {
                    p = SyCalc.parseEquation(p, true);
                    this.drawFunction(p, n, o)
                }
            }
        }
    };
    this.drawPoints = function() {
        if (this.plotInfo && this.plotInfo.pointsToDraw) {
            for (var n in this.plotInfo.pointsToDraw.pointsDecimal) {
                var l = this.plotInfo.pointsToDraw.pointsDecimal[n];
                var h = this.plotInfo.pointsToDraw.attributes[n];
                var o = this.plotInfo.pointsToDraw.pointsLatex[n];
                for (var m in h.labels) {
                    o += "<br/>\\mathrm{" + h.labels[m] + "}"
                }
                this.pointsDraw.push({
                    x: l.fst,
                    y: l.snd
                });
                this.pointsDrawAttr.push(h);
                this.pointsDrawText.push(o)
            }
        }
    }, this.drawFunctionIntersections = function() {
        var K = this.getScale();
        if (this.plotInfo && this.plotInfo.drawFuncIntersection && this.allFuncVals.length > 1 && sy_graphSettings.cur().isDrawFunctionIntercepts.draw) {
            var A = false;
            for (var E = 0; E < (this.allFuncVals.length - 1); E++) {
                for (var C = E + 1; C < this.allFuncVals.length; C++) {
                    if (this.plotInfo.funcsToDraw.funcs[E].attributes.isAsymptote) {
                        continue
                    }
                    if (this.plotInfo.funcsToDraw.funcs[C].attributes.isAsymptote) {
                        continue
                    }
                    var L = this.allFuncVals[E];
                    var J = this.allFuncVals[C];
                    if (!L || !J) {
                        continue
                    }
                    var H = this.drawFuncs[E];
                    var G = this.drawFuncs[C];
                    var D = this.plotInfo.funcsToDraw.funcs[E].derivativeFormula;
                    var B = this.plotInfo.funcsToDraw.funcs[C].derivativeFormula;
                    var w = "(" + H + ")-(" + G + ")";
                    var x = this.funcXvals[E];
                    var v = this.funcXvals[C];
                    var s = 1;
                    var h = 1;
                    var t = Math.min(this.funcXvals[E].length, this.funcXvals[C].length);
                    if (x[0] < v[0]) {
                        for (s; s < x.length; s++) {
                            if (Math.abs(x[s] - v[0]) > 5) {
                                break
                            }
                        }
                    } else {
                        if (x[0] > v[0]) {
                            for (h; h < v.length; h++) {
                                if (Math.abs(v[h] - x[0]) < 0.1) {
                                    break
                                }
                            }
                        }
                    }
                    var I = L[s] >= J[h] ? 1 : -1;
                    var z = 3;
                    var F = this.funcXvals[E];
                    for (var y = 1; y < t; y += z) {
                        var n = L[y + s];
                        var l = J[y + h];
                        var m = n >= l ? 1 : -1;
                        if (m !== I) {
                            if (this.inCanvasY(n) && this.inCanvasY(l)) {
                                var q = F[y - z - 1] / K.x + this.currCoord.x1;
                                var r = F[y + 1] / K.x + this.currCoord.x1;
                                var p = this.findIntersection(w, q, r, false);
                                var o = this.evalFunc(H, p);
                                if (p !== false) {
                                    var u = "<br/>\\mathrm{function-intersection}";
                                    this.addIntersectionPoint(w, p, o, u, "RED");
                                    A = true
                                }
                            }
                            I = m
                        }
                    }
                }
            }
        }
    };
    this.drawXIntersections = function() {
        if (this.plotInfo && this.plotInfo.drawFuncIntersection) {
            var h = false;
            for (var v = 0; v < this.allFuncVals.length; v++) {
                var B = this.allFuncVals[v];
                var x = this.drawFuncs[v];
                if (!B) {
                    continue
                }
                if (this.plotInfo.funcsToDraw.funcs[v].attributes.isAsymptote) {
                    continue
                }
                var s = x;
                var z = this.getYCoord(0);
                var y = NaN;
                if (B[0] > z) {
                    y = 1
                } else {
                    if (B[0] < z) {
                        y = -1
                    }
                }
                var u = 3;
                var w = this.funcXvals[v];
                var p = w.length;
                for (var t = 1; t < p; t += u) {
                    var j = B[t];
                    var l = y;
                    if (j > z) {
                        l = 1
                    } else {
                        if (j < z) {
                            l = -1
                        }
                    }
                    if (!isNaN(y) && l !== y) {
                        if (this.inCanvasY(z)) {
                            var A = this.getScale();
                            var n = w[t - u - 1] / A.x + this.currCoord.x1;
                            var q = w[t + 1] / A.x + this.currCoord.x1;
                            var o = this.findIntersection(s, n, q, false);
                            var m = 0;
                            if (o !== false) {
                                var r = "<br/>\\mathrm{x-intercept}";
                                this.addIntersectionPoint(s, o, m, r, "BLACK");
                                h = true
                            }
                        }
                        y = l
                    }
                }
            }
        }
    };
    this.drawExtremumPoints = function() {
        if (this.plotInfo && this.plotInfo.drawFuncIntersection) {
            var l = false;
            for (var x = 0; x < this.allFuncVals.length; x++) {
                var t = this.drawFuncs[x];
                if (!t) {
                    continue
                }
                var y = this.funcXvals[x];
                var B = this.allFuncVals[x];
                var w = this.getXvalue(y[0]);
                var z = NaN;
                var p = this.getDerivative(t, w);
                if (p > 0) {
                    z = 1
                } else {
                    if (p < 0) {
                        z = -1
                    }
                }
                var v = 3;
                var o = y.length;
                for (var u = 1; u < o; u += v) {
                    var h = B[u];
                    w = this.getXvalue(y[u]);
                    p = this.getDerivative(t, w);
                    var s = z;
                    if (p > 0) {
                        s = 1
                    } else {
                        if (p < 0) {
                            s = -1
                        }
                    }
                    if (!isNaN(z) && s !== z) {
                        if (this.inCanvasY(h)) {
                            var A = this.getScale();
                            var m = y[u - v - 1] / A.x + this.currCoord.x1;
                            var q = y[u + 1] / A.x + this.currCoord.x1;
                            var n = this.findDerivativeIntersection(t, m, q);
                            if (this.inDomain(this.plotInfo.funcsToDraw.funcs[x], n)) {
                                var j = this.evalFunc(t, n);
                                if (n !== false) {
                                    var r = z > s ? "<br/>\\mathrm{Maximum}" : "<br/>\\mathrm{Minimum}";
                                    this.addIntersectionPoint(t, n, j, r, "BLUE");
                                    l = true
                                }
                                if (Math.abs(j) < 1e-8) {
                                    var r = "<br/>\\mathrm{x-intercept}";
                                    this.addIntersectionPoint(t, n, j, r, "BLACK");
                                    l = true
                                }
                            }
                        }
                    }
                    z = s
                }
            }
        }
    };
    this.drawYIntersections = function() {
        if (this.plotInfo && this.plotInfo.drawFuncIntersection) {
            var h = false;
            for (var m = 0; m < this.allFuncVals.length; m++) {
                var o = this.plotInfo.funcsToDraw.funcs[m];
                if (o.attributes.isAsymptote) {
                    continue
                }
                var j = this.drawFuncs[m];
                if (!j) {
                    continue
                }
                var p = 0;
                if (!this.inDomain(o, p)) {
                    continue
                }
                var n = this.evalFunc(j, p);
                if (isFinite(n)) {
                    var l = "<br/>\\mathrm{y-intercept}";
                    this.addIntersectionPoint(j, p, n, l, "BLACK");
                    h = true
                }
            }
        }
    };
    this.addIntersectionPoint = function(h, q, o, r, j) {
        var p = this.guessNumber(q, h);
        if (p.success && (p.str == "\\sqrt{0}" || p.str == "-\\sqrt{0}")) {
            p.str = "0"
        }
        var n = this.guessNumber(o, h);
        q = this.toPrecision(q, 5);
        o = this.toPrecision(o, 5);
        var t = {
            x: q,
            y: o
        };
        var s = this.myIndexOf(this.pointsDraw, t);
        if (s == -1) {
            this.pointsDraw.push(t);
            var m = {
                color: j,
                borderColor: null
            };
            this.pointsDrawAttr.push(m);
            this.pointsDrawText.push("(" + p.str + "," + n.str + ")" + r)
        } else {
            var l = this.pointsDrawText[s];
            if (l.indexOf(r) < 0) {
                l += r;
                this.pointsDrawText[s] = l
            }
        }
    };
    this.toPrecision = function(h, p) {
        if (h == 0) {
            return 0
        }
        var o = Math.ceil(Math.log10(h < 0 ? -h : h));
        var j = p - Math.round(o);
        var m = Math.pow(10, j);
        var l = Math.round(h * m);
        return l / m
    };
    this.isSamePoint = function(j, h) {
        return Math.abs(j - h) < 0.00001
    };
    this.myIndexOf = function(h, l) {
        for (var j = 0; j < h.length; j++) {
            if (this.isSamePoint(h[j].x, l.x) && this.isSamePoint(h[j].y, l.y)) {
                return j
            }
        }
        return -1
    };
    this.evalForm = function(j) {
        try {
            var l = SyCalc.parseEquation(j, true);
            if (l === "") {
                return "undefined"
            }
            var m = SyParse.parse(l);
            return SyParse.evaluate(m)
        } catch (h) {
            return "undefined"
        }
    };
    this.getCachedFunction = function(h) {
        var j = this.allFuncs[h];
        if (!j) {
            j = {};
            if (h.indexOf(this.variable) >= 0) {
                j.variable = this.variable
            } else {
                if (h.indexOf("x") >= 0) {
                    j.variable = "x"
                } else {
                    if (h.indexOf("u") >= 0) {
                        j.variable = "u"
                    }
                }
            }
            j.parsedFunction = SyParse.parse(h);
            this.allFuncs[h] = j
        }
        return j
    };
    this.evalFunc = function(j, h) {
        var l = this.getCachedFunction(j);
        if (h === undefined) {
            return SyParse.evaluate(l.parsedFunction)
        } else {
            var m = {};
            m[l.variable] = h;
            return SyParse.evaluate(l.parsedFunction, m)
        }
    };
    this.roundToInt = function(j) {
        var h = Math.round(j);
        if (Math.abs(j - h) < 0.00001) {
            return h
        } else {
            return j
        }
    };
    this.hasTrig = function(h) {
        if (h.match(/(sin|tan|cos|csc|sec|cot)/)) {
            return true
        }
        return false
    };
    this.hasE = function(h) {
        if (h.match(/e.*\^/)) {
            return true
        }
        return false
    };
    this.guessNumber = function(j, m) {
        var h = this.hasTrig(m);
        var n = this.hasE(m);
        this.num2str = function(v, r) {
            var y = 11;
            var w = 0.00001;
            var x = {
                str: String(v),
                success: false
            };
            var q;
            var C = Math.round(v);
            if (this.isInt(v)) {
                x.str = String(v);
                x.success = true
            } else {
                if (Math.abs(v - C) < w) {
                    x.str = String(C);
                    x.success = true
                } else {
                    if (v < 0) {
                        q = this.num2str(-v, true);
                        x.str = this.negateNumberString(q.str);
                        x.success = q.success
                    } else {
                        if (Math.abs(v - Math.PI) < w && h) {
                            x.str = "\\pi";
                            x.success = true
                        } else {
                            if (Math.abs(v - Math.E) < w && n) {
                                x.str = "e";
                                x.success = true
                            } else {
                                for (var u = 2; u <= y; u++) {
                                    if (Math.abs(v - Math.sqrt(u)) < w) {
                                        x.str = "\\sqrt{" + u + "}";
                                        x.success = true
                                    }
                                }
                                if (r) {
                                    var A = Math.sqrt(v);
                                    q = this.num2str(A, false);
                                    if (q.success) {
                                        x.str = q.str + "^{2}";
                                        x.success = true;
                                        return x
                                    }
                                    var z = Math.pow(v, 2);
                                    q = this.num2str(z, false);
                                    if (q.success) {
                                        x.str = "\\sqrt{" + q.str + "}";
                                        x.success = true;
                                        return x
                                    }
                                    for (var u = 2; u <= y; u++) {
                                        var t = v * u;
                                        q = this.num2str(t, false);
                                        if (q.success) {
                                            x.str = "\\frac{" + q.str + "}{" + u + "}";
                                            x.success = true;
                                            return x
                                        }
                                        var p = v / u;
                                        q = this.num2str(p, false);
                                        if (q.success) {
                                            x.str = u + q.str;
                                            x.success = true;
                                            return x
                                        }
                                    }
                                    for (var u = 2; u < y; u++) {
                                        for (var s = u + 1; s <= y; s++) {
                                            if (!this.isInt(u / s) && !this.isInt(s / u)) {
                                                var t = v * u / s;
                                                q = this.num2str(t, false);
                                                if (q.success) {
                                                    x.str = "\\frac{" + s + q.str + "}{" + u + "}";
                                                    x.success = true;
                                                    return x
                                                }
                                                t = v * s / u;
                                                q = this.num2str(t, false);
                                                if (q.success) {
                                                    x.str = "\\frac{" + u + q.str + "}{" + s + "}";
                                                    x.success = true;
                                                    return x
                                                }
                                            }
                                        }
                                    }
                                    for (var u = 1; u <= y; u++) {
                                        var B = v + u;
                                        q = this.num2str(B, false);
                                        if (q.success) {
                                            x.str = q.str + "-" + u;
                                            x.success = true;
                                            return x
                                        }
                                        var o = v - u;
                                        if (o > 0) {
                                            q = this.num2str(o, false);
                                            if (q.success) {
                                                x.str = q.str + "+" + u;
                                                x.success = true;
                                                return x
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return x
        };
        var l = this.num2str(j, true);
        if (!l.success) {
            l.str = String(this.toPrecision(j, 5))
        }
        return l
    };
    this.isInt = function(h) {
        return h % 1 === 0
    };
    this.negateNumberString = function(h) {
        h = h.replace(/-/g, "#");
        h = h.replace(/\+/g, "-");
        h = h.replace(/#/g, "+");
        if (h.charAt(0) === "+") {
            h = h.subString(1, h.length)
        } else {
            h = "-" + h
        }
        return h
    };

    function f(h) {}
    this.findIntersection = function(h, n, j, m) {
        var p = (n + j) / 2;
        f(h + ", guess: " + p);
        if (Math.abs(p) < 0.1 && m != true) {
            var o = h;
            o = o.replace(new RegExp("\\b" + this.variable + "\\b", "g"), "(" + this.variable + "+5)");
            f("Replaced equation = " + o);
            var l = this.findIntersection(o, n - 5, j - 5, true);
            f(l);
            if (l !== false) {
                return l + 5
            }
            return false
        }
        return this.newtonRaphson(h, p, n, j, false)
    };
    this.findDerivativeIntersection = function(h, n, j, m) {
        var p = (n + j) / 2;
        f(h + ", guess: " + p);
        if (Math.abs(p) < 0.1 && m != true) {
            var o = h;
            o = o.replace(new RegExp("\\b" + this.variable + "\\b", "g"), "(" + this.variable + "+5)");
            var l = this.findDerivativeIntersection(o, n - 5, j - 5, true);
            if (l !== false) {
                return l + 5
            }
            return false
        }
        return this.newtonRaphson(h, p, n, j, true)
    };
    this.newtonRaphson = function(m, q, u, o, r) {
        var h = q;
        var n = q;
        var p = 0;
        var s = 30;
        var v = 1;
        while (n >= u && n <= o && p++ < s) {
            v = r ? this.getDerivative(m, n) : this.evalFunc(m, n);
            if (Math.abs(v) < 1e-10 && Math.abs(n - t) < 1e-10) {
                return n
            }
            var t = n;
            var l = r ? this.get2ndDerivative(m, t) : this.getDerivative(m, t);
            if (l == 0 || !isFinite(l)) {
                break
            }
            n = n - v / l
        }
        if (Math.abs(v) < 1e-10 || p >= s) {
            f("Convergence failed, best root = " + n);
            return n
        }
        f("false: center at " + h + " but guess at " + n);
        return false
    };
    this.getDerivative = function(p, t) {
        var q = 0;
        var r = t;
        if (r > 1 || r < -1) {
            var o = Math.sqrt(this.eps) * r
        } else {
            var o = Math.sqrt(this.eps)
        }
        var m = this.evalFunc(p, r);
        var j = [25];
        for (var n = 0; n < j.length; n++) {
            var s = (o * j[n]);
            var l = 1 / s;
            t = r + s;
            var u = this.evalFunc(p, t);
            q += (u - m) * l;
            t = r - s;
            u = this.evalFunc(p, t);
            q += (m - u) * l
        }
        return q / (2 * j.length)
    };
    this.get2ndDerivative = function(p, t) {
        var q = 0;
        var r = t;
        if (r > 1 || r < -1) {
            var o = Math.pow(this.eps, 0.25) * r
        } else {
            var o = Math.pow(this.eps, 0.25)
        }
        var m = this.evalFunc(p, r);
        var j = [25];
        for (var n = 0; n < j.length; n++) {
            var s = (o * j[n]);
            var l = 1 / (s * s);
            t = r + s;
            var u = this.evalFunc(p, t);
            q += (u - m) * l;
            t = r - s;
            u = this.evalFunc(p, t);
            q += (u - m) * l
        }
        return q / j.length
    };
    this.fillAreas = function() {
        if (this.plotInfo) {
            for (var h in this.plotInfo.fills) {
                var j = this.plotInfo.fills[h];
                if (j.xIneq || j.yIneq || j.twoVar) {
                    this.inequalityPlot(j)
                } else {
                    this.fillPlot(j)
                }
            }
            if (this.plotInfo.colorInequalityIntersection) {
                this.colorIntersection(this.plotInfo.fills)
            }
        }
    };
    this.inequalityPlot = function(l) {
        if (l.xIneq || l.yIneq) {
            for (var s in l.ranges) {
                var h = l.ranges[s];
                var j, m;
                if (l.xIneq) {
                    j = this.getXInCanvas(this.getXCoord(h.fst));
                    m = this.getXInCanvas(this.getXCoord(h.snd))
                } else {
                    m = this.getYInCanvas(this.getYCoord(h.fst));
                    j = this.getYInCanvas(this.getYCoord(h.snd))
                }
                var n = 1 / this.quality;
                for (var q = j; q <= m; q += n) {
                    this.ctx.strokeStyle = l.color;
                    this.ctx.beginPath();
                    if (l.xIneq) {
                        this.ctx.moveTo(q, this.minYpos());
                        this.ctx.lineTo(q, this.maxYpos())
                    } else {
                        this.ctx.moveTo(this.minXpos(), q);
                        this.ctx.lineTo(this.maxXpos(), q)
                    }
                    this.ctx.stroke()
                }
            }
        } else {
            if (l.twoVar) {
                var o = this.funcXvals[0];
                for (var v = 0; v < o.length; v++) {
                    var u = o[v];
                    this.ctx.strokeStyle = l.color;
                    this.ctx.beginPath();
                    var t = this.indexOfFunction(l.func);
                    var r = this.allFuncVals[t][v];
                    r = this.fixYPosition(r);
                    var p = l.trueAboveLine ? 0 : this.height;
                    this.ctx.moveTo(u, r);
                    this.ctx.lineTo(u, p);
                    this.ctx.stroke()
                }
            }
        }
    };
    this.fillPlot = function(m) {
        for (var l = 0; l < m.funcIndices.length; l++) {
            var o = m.funcIndices[l];
            var h = m.ranges[l];
            var j = this.getXInCanvas(this.getXCoord(h.fst));
            var n = this.getXInCanvas(this.getXCoord(h.snd));
            var p = this.funcXvals[this.funcXvals.length - 1];
            for (var t = 0; t < p.length; t++) {
                var s = p[t];
                if (s >= j && s <= n) {
                    this.ctx.strokeStyle = m.color;
                    this.ctx.beginPath();
                    var r = this.allFuncVals[o.fst][t];
                    var q = this.allFuncVals[o.snd][t];
                    r = this.getYInCanvas(r);
                    q = this.getYInCanvas(q);
                    this.ctx.moveTo(s, r);
                    this.ctx.lineTo(s, q);
                    this.ctx.stroke()
                }
            }
        }
    };
    this.colorIntersection = function(u) {
        var m = document.createElement("canvas");
        var l = m.getContext("2d");
        l.width = 2;
        l.height = 2;
        l.fillStyle = "rgb(255,255,255)";
        l.fillRect(0, 0, l.width, l.height);
        var n = 0;
        for (var h in u) {
            var s = u[h];
            if (s.xIneq || s.yIneq || s.twoVar) {
                var x = 1 / this.quality;
                for (var w = 0; w < l.width; w += x) {
                    l.strokeStyle = s.color;
                    l.beginPath();
                    l.moveTo(w, 0);
                    l.lineTo(w, l.height);
                    l.stroke()
                }
                n = n + 1
            }
        }
        if (n > 1) {
            var r = l.getImageData(0, 0, 1, 1).data;
            var t = [0, 0, 0, 255];
            var j = this.ctx.getImageData(0, 0, this.graph.width, this.graph.height);
            var q = j.data;
            var p = false;
            for (var o = 0; o < q.length; o += 16) {
                var v = this.slice(q, o, o + 4);
                if (this.closeEnough(v, r)) {
                    q[o] = t[0];
                    q[o + 1] = t[1];
                    q[o + 2] = t[2];
                    q[o + 3] = t[3];
                    p = true
                } else {
                    if (p) {
                        this.closeEnough(v, r)
                    }
                }
            }
            this.ctx.putImageData(j, 0, 0)
        }
    };
    this.closeEnough = function(j, h) {
        var l = 7;
        if (Math.abs(j[0] - h[0]) >= l) {
            return false
        }
        if (Math.abs(j[1] - h[1]) >= l) {
            return false
        }
        if (Math.abs(j[2] - h[2]) >= l) {
            return false
        }
        if (Math.abs(j[3] - h[3]) >= l) {
            return false
        }
        return true
    };
    this.slice = function(m, n, j) {
        var h = new Array();
        for (var l = n; l < j; l++) {
            h[l - n] = m[l]
        }
        return h
    };
    this.indexOfFunction = function(h) {
        for (var l in this.plotInfo.funcsToDraw.funcs) {
            var j = this.plotInfo.funcsToDraw.funcs[l];
            if (j.evalFormula == h) {
                return l
            }
        }
        return -1
    };
    this.fixYPosition = function(h) {
        if (h < 0) {
            return 0
        } else {
            if (h > this.height) {
                return this.height
            } else {
                return h
            }
        }
    };
    this.getScale = function() {
        return {
            x: (this.width / (this.currCoord.x2 - this.currCoord.x1)),
            y: (this.height / (this.currCoord.y2 - this.currCoord.y1))
        }
    };
    this.getRange = function() {
        return {
            x: Math.abs(this.currCoord.x2 - this.currCoord.x1),
            y: Math.abs(this.currCoord.y2 - this.currCoord.y1)
        }
    };
    this.checkMove = function(u, s) {
        this.clearBalloons();
        this.balloonShowed = false;
        var t = this.options.proximity;
        if (this.pointsDraw.length > 0) {
            for (var C in this.pointsDraw) {
                var z = this.pointsDraw[C];
                var A = this.getCoord(z.x, z.y);
                if (this.isPointInProximity(u, s, A.x, A.y, t)) {
                    this.showBalloon(this.pointsDrawText[C], A.x + 100, A.y - 40);
                    break
                }
            }
        }
        if (this.balloonShowed == false && this.plotInfo) {
            for (var C in this.plotInfo.linesToDraw) {
                var o = this.plotInfo.linesToDraw[C];
                var n = this.getCoord(o.p1x, o.p1y);
                var l = this.getCoord(o.p2x, o.p2y);
                var w = this.pointSegmentDist(u, s, n.x, n.y, l.x, l.y);
                if (w < 10) {
                    this.showBalloon(o.attributes.labels[0], u, s)
                }
            }
            if (this.plotInfo.funcsToDraw && this.plotInfo.funcsToDraw.funcs) {
                var m = [];
                if (this.currentFunctionIndex != undefined) {
                    m.push(this.currentFunctionIndex)
                }
                for (var B in this.funcsYpos) {
                    if (this.funcsYpos.hasOwnProperty(B)) {
                        m.push(B)
                    }
                }
                for (var C = 0; C < m.length; C++) {
                    var v = this.funcsYpos[m[C]];
                    if (v == null) {
                        var q = this.plotInfo.funcsToDraw.funcs[m[C]].evalFormula;
                        var j = SyCalc.parseEquation(q.substring(2), true);
                        if (j === "") {
                            continue
                        }
                        var h = SyParse.parse(j);
                        j = SyParse.evaluate(h);
                        var p = ((j - this.currCoord.x1) / (this.currCoord.x2 - this.currCoord.x1)) * this.width;
                        if (this.isInProximity(p, u, t)) {
                            this.showBalloon(this.functionsInfo[m[C]], u, s)
                        }
                    } else {
                        var D = this.funcsXpos[m[C]];
                        for (var r = 0; r < D.length; r++) {
                            if (this.isPointInProximity(u, s, D[r], v[r], t)) {
                                this.showBalloon(this.functionsInfo[m[C]], u, s);
                                break
                            }
                        }
                    }
                    if (this.balloonShowed) {
                        break
                    }
                }
                if (this.balloonShowed == false) {
                    for (var C in this.plotInfo.funcsToDraw.funcs) {
                        var v = this.funcsYpos[C];
                        if (v == null) {
                            var q = this.plotInfo.funcsToDraw.funcs[C].evalFormula;
                            var j = SyCalc.parseEquation(q.substring(2), true);
                            if (j === "") {
                                continue
                            }
                            var h = SyParse.parse(j);
                            j = SyParse.evaluate(h);
                            var p = ((j - this.currCoord.x1) / (this.currCoord.x2 - this.currCoord.x1)) * this.width;
                            if (this.isInProximity(p, u, t)) {
                                this.showBalloon(this.functionsInfo[C], u, s)
                            }
                        }
                    }
                }
            }
        }
    };
    this.pointSegmentDist = function(z, u, p, w, n, v) {
        var q = z - p;
        var o = u - w;
        var m = n - p;
        var j = v - w;
        var l = q * m + o * j;
        var s = m * m + j * j;
        var r = -1;
        if (s != 0) {
            r = l / s
        }
        var h, t;
        if (r < 0) {
            h = p;
            t = w
        } else {
            if (r > 1) {
                h = n;
                t = v
            } else {
                h = p + r * m;
                t = w + r * j
            }
        }
        var F = z - h;
        var E = u - t;
        return Math.sqrt(F * F + E * E)
    };
    this.isPointInProximity = function(j, m, h, l, n) {
        return (this.isInProximity(j, h, n) && this.isInProximity(m, l, n))
    };
    this.isInProximity = function(j, h, m) {
        var l = j - h;
        if (l < 0) {
            l = -1 * l
        }
        return (l < m)
    };
    this.findClosestPoint = function(j, o, n, m) {
        var p = 999999,
            r = null,
            q = null;
        for (var l = 0; l < n.length; l++) {
            var h = Math.sqrt(Math.pow(j - n[l], 2) + Math.pow(o - m[l], 2));
            if (h < p) {
                p = h;
                r = n[l];
                q = m[l]
            }
        }
        return {
            x: r,
            y: q
        }
    };
    this.clearBalloons = function() {
        $(".plotBalloon").hide()
    };
    this.clearPlotInfo = function() {
        this.pointsDraw = [];
        this.pointsDrawAttr = [];
        this.pointsDrawText = [];
        this.functionsInfo = []
    };
    this.showBalloon = function(o, j, p) {
        if (!$.fn.showBalloon || !o || o.length == 0) {
            return
        }
        this.balloonShowed = true;
        p += this.options.yBalloonOffset;
        p = -1 * p;
        var n = "<div>";
        var m = o.split("<br/>");
        for (var h in m) {
            var l = m[h];
            n += "<span class='mathquill-embedded-latex'>" + l + "</span><br/>"
        }
        n += "</div>";
        this.graphJQ.showBalloon({
            contents: n,
            position: "top left",
            classname: "plotBalloon",
            offsetX: j,
            offsetY: p,
            delay: 0,
            minLifetime: 0,
            showDuration: 0,
            hideDuration: 0,
            tipSize: 0,
            css: {
                "max-width": "200px",
                opacity: "1",
                "z-index": "1100"
            }
        });
        $(".plotBalloon .mathquill-embedded-latex").mathquill()
    };
    this.mouseDown = function(h) {
        if (this.mouseButton == 0) {
            this.startDrag.x = h.pageX - this.canvasX;
            this.startDrag.y = h.pageY - this.canvasY
        }
    };
    this.mouseUp = function(h) {
        $("#sy_graph").css("cursor", "default");
        this.mouseButton = 0;
        this.donePanning()
    };
    this.zoomIn = function(h) {
        this.zoom(this.zoomFactor, h)
    };
    this.getNewValue = function(j, h) {
        var l = parseFloat($(h).val());
        if (isFinite(l)) {
            return l
        }
        return j
    };
    this.checkResetNeeded = function(h) {
        sy_graphSettings.showHomeButton()
    };
    this.zoomOut = function(h) {
        this.zoom(-this.zoomFactor, h)
    };
    this.zoom = function(j, h) {
        var l = this.getRange();
        var p = jQuery.extend({}, this.currCoord);
        if (h) {
            var q = h.pageX - this.canvasX;
            var o = h.pageY - this.canvasY;
            var n = 1 - (o / this.height);
            var m = q / this.width;
            p.x1 += l.x * j * m;
            p.y1 += l.y * j * n;
            p.x2 -= l.x * j * (1 - m);
            p.y2 -= l.y * j * (1 - n)
        } else {
            p.x1 += l.x * j;
            p.y1 += l.y * j;
            p.x2 -= l.x * j;
            p.y2 -= l.y * j
        }
        const r = 0.1;
        if (p.x2 - p.x1 <= r || p.y2 - p.y1 <= r) {
            return
        }
        this.currCoord = jQuery.extend({}, p);
        sy_graphSettings.updateCoordinates();
        this.checkResetNeeded(true);
        this.draw(false)
    };
    window.graphG = this;
    this.plotPoints = function() {
        for (var l = 0; l < this.pointsDraw.length; ++l) {
            var j = this.pointsDraw[l];
            var h = this.pointsDrawAttr[l];
            this.adjustAttr(h);
            this.drawPoint(j.x, j.y, h.color, h.borderColor)
        }
    };
    this.draw = function(h) {
        this.clearBalloons();
        if (h) {
            this.clearPlotInfo()
        }
        this.drawGrid();
        this.drawFunctions();
        if (h) {
            this.drawPoints()
        }
        this.fillAreas();
        this.drawLines();
        if (h) {
            if (sy_graphSettings.cur().isDrawFunctionIntercepts.draw) {
                this.drawFunctionIntersections()
            }
            if (sy_graphSettings.cur().isDrawExtreme.draw) {
                this.drawExtremumPoints()
            }
            if (sy_graphSettings.cur().isDrawAxisIntercepts.draw) {
                this.drawXIntersections();
                this.drawYIntersections()
            }
            if (this.tablePoints.length > 0) {
                for (var j = 0; j < this.tablePoints.length; j++) {
                    this.pointsDraw.push(this.tablePoints[j]);
                    this.pointsDrawText.push(this.tablePointsText[j]);
                    this.pointsDrawAttr.push({
                        color: this.tablePointsColor,
                        borderColor: this.tablePointsColor
                    })
                }
            }
            this.plotPoints()
        }
    };
    this.init(this.width, this.height, this.options.pixelRatio);
    this.draw(true)
}

function SyCalc() {
    this.angles = "radians";
    this.loopcounter = 0;
    this.eps = calcEps();
    this.convAngles = function(a) {
        if (this.angles == "degrees") {
            return a * (Math.PI / 180)
        }
        if (this.angles == "gradians") {
            return a * (Math.PI / 200)
        }
        return a
    };
    this.convRadians = function(a) {
        if (this.angles == "degrees") {
            return (a * 180 / Math.PI)
        }
        if (this.angles == "gradians") {
            return (a * 200 / Math.PI)
        }
        return a
    };
    this.sin = function(a) {
        return Math.sin(SyCalc.convAngles(a))
    };
    this.cos = function(a) {
        return Math.cos(SyCalc.convAngles(a))
    };
    this.tan = function(a) {
        return Math.tan(SyCalc.convAngles(a))
    };
    this.sec = function(a) {
        return (1 / Math.cos(SyCalc.convAngles(a)))
    };
    this.csc = function(a) {
        return (1 / Math.sin(SyCalc.convAngles(a)))
    };
    this.cot = function(a) {
        return (1 / Math.tan(SyCalc.convAngles(a)))
    };
    this.arcsin = function(a) {
        return SyCalc.convRadians(Math.asin(a))
    };
    this.arccos = function(a) {
        return SyCalc.convRadians(Math.acos(a))
    };
    this.arctan = function(a) {
        return SyCalc.convRadians(Math.atan(a))
    };
    this.arccsc = function(a) {
        return (SyCalc.convRadians(Math.asin(1 / a)))
    };
    this.arcsec = function(a) {
        return SyCalc.convRadians(Math.acos(1 / a))
    };
    this.arccot = function(a) {
        return (SyCalc.convRadians(a < 0 ? (Math.atan(1 / a) + Math.PI) : Math.atan(1 / a)))
    };
    this.pow = function(a, b) {
        return Math.pow(a, b)
    };
    this.sinh = function(b) {
        var a = Math.exp(b);
        return (a - (1 / a)) / 2
    };
    this.cosh = function(b) {
        var a = Math.exp(b);
        return (a + (1 / a)) / 2
    };
    this.tanh = function(b) {
        var a = Math.exp(b * 2);
        return (a - 1) / (a + 1)
    };
    this.sech = function(b) {
        var a = Math.exp(b);
        return 2 / (a + (1 / a))
    };
    this.csch = function(b) {
        var a = Math.exp(b);
        return 2 / (a - (1 / a))
    };
    this.coth = function(b) {
        var a = Math.exp(b * 2);
        return (a + 1) / (a - 1)
    };
    this.arcsinh = function(a) {
        return Math.log(a + Math.sqrt(a * a + 1))
    };
    this.arccosh = function(a) {
        return Math.log(a + Math.sqrt(a * a - 1))
    };
    this.arctanh = function(a) {
        return Math.log((1 + a) / (1 - a)) / 2
    };
    this.arcsech = function(a) {
        return Math.log((1 + Math.sqrt(1 - a * a)) / a)
    };
    this.arccsch = function(a) {
        return Math.log((1 + Math.sqrt(a * a + 1)) / a)
    };
    this.arccoth = function(a) {
        return Math.log((a + 1) / (a - 1)) / 2
    };
    this.roundToSignificantFigures = function(a, b) {
        if (a == 0) {
            return 0
        }
        d = Math.ceil(Math.log10(a < 0 ? -a : a));
        power = b - d;
        magnitude = Math.pow(10, power);
        shifted = Math.round(a * magnitude);
        return shifted / magnitude
    };
    this.fixRoot = function(a) {
        var f;
        while ((f = a.indexOf("\\sqrt[")) >= 0) {
            var g = f + 6;
            var b = this.getBlock(a, g, "[", "]");
            g += b.length;
            if (a.substr(g, 2) !== "]{") {
                break
            }
            g += 2;
            var e = this.getBlock(a, g, "{", "}");
            g += e.length + 1;
            if (b.length > 1) {
                b = "(" + b + ")"
            }
            a = a.replace(a.substring(f, g), "(" + e + ")^{1/" + b + "}")
        }
        return a
    };
    this.parseEquation = function(j, h) {
        j = j.replace(/\\pi/g, "\u03c0");
        j = j.replace(/\\log_\{(.+?)\}\((.+?)\)/g, "(\\frac{\\ln($2)}{\\ln($1)})");
        j = j.replace(/\\ln(\\left\|.+?\\right\|)/g, "\\ln($1)");
        j = j.replace(/\\left\|(.+?)\\right\|/g, "(\\abs($1))");
        j = j.replace(/\\lfloor(.+?)\\rfloor/g, "(\\floor($1))");
        j = j.replace(/\\lceil(.+?)\\rceil/g, "(\\ceil($1))");
        j = j.replace(/(\\ln|\\log|\\sin|\\cos|\\tan|\\cot|\\csc|\\sec|\\sinh|\\cosh|\\tanh|\\coth|\\csch|\\sech|\\arcsin|\\arccos|\\arctan|\\arccot|\\arccsc|\\arcsec|\\arcsinh|\\arccosh|\\arctanh|\\arccoth|\\arccsch|\\arcsech)\^\{(.+?)\}\((.+?)\)/g, "($1($3))^{$2}");
        j = this.fixRoot(j);
        var n = j;
        var q = "";
        var g = "";
        var f = 0;
        var l = false;
        var a = "";
        for (f; f < n.length; f++) {
            var p = n[f];
            if (q.length == 0) {
                g = " "
            } else {
                g = q.substr(q.length - 1)
            }
            var b = q.length;
            if (p.match(/[a-zA-Z\u03b8\u0398\u03b1\u03b2\u03c0]/)) {
                if (l) {
                    a += p;
                    continue
                }
                if (g == ")" || g.match(/[0-9]/) || g == "|" || g.match(/[a-zA-Z\u03b8\u0398\u03b1\u03b2\u03c0]/)) {
                    q += "*"
                }
                q += p
            }
            l = false;
            if (a == "cdot") {
                q += "*";
                a = ""
            }
            if (p.match(/[0-9]/)) {
                if (g == ")" || g.match(/[a-zA-Z\u03b8\u0398\u03b1\u03b2\u03c0]/) || g == "|") {
                    q += "*"
                }
                q += p
            } else {
                if (p.match(/\./)) {
                    if (!g.match(/[0-9]/)) {
                        q += "0"
                    }
                    q += p
                } else {
                    if (p.match(/\^/)) {
                        q += p;
                        if (n[f + 1] === "{") {
                            var e = this.getBlock(n, f + 2, "{", "}");
                            f += e.length + 2;
                            q += "(" + this.parseEquation(e) + ")"
                        }
                    } else {
                        if (p.match(/[\*\/\-\+\%]/)) {
                            q += p
                        } else {
                            if (p == "(") {
                                if (g == ")" || g.match(/[a-zA-Z]/) || g.match(/[0-9]/)) {
                                    q += "*"
                                }
                                if (a != "") {
                                    q += a;
                                    a = ""
                                }
                                var e = this.getBlock(n, f + 1, "(", ")");
                                q += "(" + this.parseEquation(e) + ")";
                                f += e.length + 1
                            } else {
                                if (p == "{") {
                                    if (a === "frac") {
                                        var o = this.getBlock(n, f + 1, "{", "}");
                                        f += o.length + 2;
                                        var m = this.getBlock(n, f + 1, "{", "}");
                                        f += m.length + 1;
                                        if (g == ")" || g.match(/[a-zA-Z]/) || g.match(/[0-9]/)) {
                                            q += "*"
                                        }
                                        q += "(" + this.parseEquation(o) + ")/(" + this.parseEquation(m) + ")";
                                        a = ""
                                    } else {
                                        if (a == "sqrt") {
                                            var o = this.getBlock(n, f + 1, "{", "}");
                                            f += o.length + 1;
                                            if (g == ")" || g.match(/[a-zA-Z]/) || g == "|" || g.match(/[0-9]/)) {
                                                q += "*"
                                            }
                                            q += "sqrt(" + this.parseEquation(o) + ")";
                                            a = ""
                                        }
                                    }
                                } else {
                                    if (p == "\\") {
                                        a = "";
                                        l = true
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return q
    };
    this.getBlock = function(f, e, g, j) {
        var b = "";
        var h = 1;
        for (e; e < f.length; e++) {
            var a = f[e];
            if (a == g) {
                h++
            } else {
                if (a == j) {
                    h--
                }
            }
            if (h == 0) {
                return b
            }
            b += a
        }
        return b
    };
    this.roundFloat = function(a) {
        return (Math.round(a * 100000000000) / 100000000000)
    }
}
var SyParse = (function(B) {
    mchEps = calcEps() * 10;

    function F(P) {
        function O() {}
        O.prototype = P;
        return new O()
    }
    var G = 0;
    var D = 1;
    var A = 2;
    var t = 3;
    var z = 4;

    function e(O, Q, P, R) {
        this.type_ = O;
        this.index_ = Q || 0;
        this.prio_ = P || 0;
        this.number_ = (R !== undefined && R !== null) ? R : 0;
        this.toString = function() {
            switch (this.type_) {
                case G:
                    return this.number_;
                case D:
                case A:
                case t:
                    return this.index_;
                case z:
                    return "CALL";
                default:
                    return "Invalid Token"
            }
        }
    }

    function H(R, P, O, Q) {
        this.tokens = R;
        this.ops1 = P;
        this.ops2 = O;
        this.functions = Q
    }
    var s = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        I = /[\\\'\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        j = {
            "\b": "\\b",
            "\t": "\\t",
            "\n": "\\n",
            "\f": "\\f",
            "\r": "\\r",
            "'": "\\'",
            "\\": "\\\\"
        };

    function C(O) {
        if (typeof O === "string") {
            I.lastIndex = 0;
            return I.test(O) ? "'" + O.replace(I, function(P) {
                var Q = j[P];
                return typeof Q === "string" ? Q : "\\u" + ("0000" + P.charCodeAt(0).toString(16)).slice(-4)
            }) + "'" : "'" + O + "'"
        }
        return O
    }
    H.prototype = {
        simplify: function(W) {
            W = W || {};
            var R = [];
            var Q = [];
            var U;
            var T;
            var S;
            var V = this.tokens.length;
            var X;
            var P = 0;
            for (P = 0; P < V; P++) {
                X = this.tokens[P];
                var O = X.type_;
                if (O === G) {
                    R.push(X)
                } else {
                    if (O === t && (X.index_ in W)) {
                        X = new e(G, 0, 0, W[X.index_]);
                        R.push(X)
                    } else {
                        if (O === A && R.length > 1) {
                            T = R.pop();
                            U = R.pop();
                            S = this.ops2[X.index_];
                            X = new e(G, 0, 0, S(U.number_, T.number_));
                            R.push(X)
                        } else {
                            if (O === D && R.length > 0) {
                                U = R.pop();
                                S = this.ops1[X.index_];
                                X = new e(G, 0, 0, S(U.number_));
                                R.push(X)
                            } else {
                                while (R.length > 0) {
                                    Q.push(R.shift())
                                }
                                Q.push(X)
                            }
                        }
                    }
                }
            }
            while (R.length > 0) {
                Q.push(R.shift())
            }
            return new H(Q, F(this.ops1), F(this.ops2), F(this.functions))
        },
        evaluate: function(W) {
            W = W || {};
            var Q = [];
            var T;
            var S;
            var R;
            var V = this.tokens.length;
            var X;
            var P = 0;
            for (P = 0; P < V; P++) {
                X = this.tokens[P];
                var O = X.type_;
                if (O === G) {
                    Q.push(X.number_)
                } else {
                    if (O === A) {
                        S = Q.pop();
                        T = Q.pop();
                        if (X.index_ == "/" && P < (V - 1) && this.tokens[P + 1].index_ == "^" && Q[Q.length - 1] < 0 && K(S) && K(T) && !n(S)) {
                            var U = Q.pop();
                            Q.push(N(U, T, S));
                            P++
                        } else {
                            R = this.ops2[X.index_];
                            Q.push(R(T, S))
                        }
                    } else {
                        if (O === t) {
                            if (X.index_ in W) {
                                Q.push(W[X.index_])
                            } else {
                                if (X.index_ in this.functions) {
                                    Q.push(this.functions[X.index_])
                                } else {
                                    throw new Error("undefined variable: " + X.index_)
                                }
                            }
                        } else {
                            if (O === D) {
                                T = Q.pop();
                                R = this.ops1[X.index_];
                                Q.push(R(T))
                            } else {
                                if (O === z) {
                                    T = Q.pop();
                                    R = Q.pop();
                                    if (R.apply && R.call) {
                                        if (Object.prototype.toString.call(T) == "[object Array]") {
                                            Q.push(R.apply(undefined, T))
                                        } else {
                                            Q.push(R.call(undefined, T))
                                        }
                                    } else {
                                        throw new Error(R + " is not a function")
                                    }
                                } else {
                                    throw new Error("invalid Expression")
                                }
                            }
                        }
                    }
                }
            }
            if (Q.length > 1) {
                throw new Error("invalid Expression (parity)")
            }
            return Math.round(Q[0] / mchEps) * mchEps
        },
        toString: function(R) {
            var Q = [];
            var U;
            var T;
            var S;
            var V = this.tokens.length;
            var W;
            var P = 0;
            for (P = 0; P < V; P++) {
                W = this.tokens[P];
                var O = W.type_;
                if (O === G) {
                    Q.push(C(W.number_))
                } else {
                    if (O === A) {
                        T = Q.pop();
                        U = Q.pop();
                        S = W.index_;
                        if (R && S == "^") {
                            Q.push("Math.pow(" + U + "," + T + ")")
                        } else {
                            Q.push("(" + U + S + T + ")")
                        }
                    } else {
                        if (O === t) {
                            Q.push(W.index_)
                        } else {
                            if (O === D) {
                                U = Q.pop();
                                S = W.index_;
                                if (S === "-") {
                                    Q.push("(" + S + U + ")")
                                } else {
                                    Q.push(S + "(" + U + ")")
                                }
                            } else {
                                if (O === z) {
                                    U = Q.pop();
                                    S = Q.pop();
                                    Q.push(S + "(" + U + ")")
                                } else {
                                    throw new Error("invalid Expression")
                                }
                            }
                        }
                    }
                }
            }
            if (Q.length > 1) {
                throw new Error("invalid Expression (parity)")
            }
            return Q[0]
        },
        variables: function() {
            var O = this.tokens.length;
            var R = [];
            for (var P = 0; P < O; P++) {
                var Q = this.tokens[P];
                if (Q.type_ === t && (R.indexOf(Q.index_) == -1)) {
                    R.push(Q.index_)
                }
            }
            return R
        },
        toJSFunction: function(P, Q) {
            var O = new Function(P, "with(Parser.values) { return " + this.simplify(Q).toString(true) + "; }");
            return O
        }
    };

    function g(P, O) {
        return Number(P) + Number(O)
    }

    function u(P, O) {
        return P - O
    }

    function b(P, O) {
        return P * O
    }

    function L(P, O) {
        return P / O
    }

    function h(P, O) {
        return P % O
    }

    function x(P, O) {
        return "" + P + O
    }

    function N(O, Q, P) {
        var R = -Math.pow(-O, 1 / P);
        return Math.pow(R, Q)
    }

    function m(O) {
        return -O
    }

    function K(O) {
        return O % 1 === 0
    }

    function n(O) {
        return O % 2 === 0
    }

    function w(O) {
        return Math.random() * (O || 1)
    }

    function v(P) {
        P = Math.floor(P);
        var O = P;
        while (P > 1) {
            O = O * (--P)
        }
        return O
    }

    function p(P, O) {
        return Math.sqrt(P * P + O * O)
    }

    function E(P, O) {
        if (Object.prototype.toString.call(P) != "[object Array]") {
            return [P, O]
        }
        P = P.slice();
        P.push(O);
        return P
    }

    function f() {
        this.success = false;
        this.errormsg = "";
        this.expression = "";
        this.pos = 0;
        this.tokennumber = 0;
        this.tokenprio = 0;
        this.tokenindex = 0;
        this.tmpprio = 0;
        this.ops1 = {
            sin: SyCalc.sin,
            cos: SyCalc.cos,
            tan: SyCalc.tan,
            cot: SyCalc.cot,
            sec: SyCalc.sec,
            csc: SyCalc.csc,
            arcsin: SyCalc.arcsin,
            arccos: SyCalc.arccos,
            arctan: SyCalc.arctan,
            arccot: SyCalc.arccot,
            arcsec: SyCalc.arcsec,
            arccsc: SyCalc.arccsc,
            sinh: SyCalc.sinh,
            cosh: SyCalc.cosh,
            tanh: SyCalc.tanh,
            coth: SyCalc.coth,
            sech: SyCalc.sech,
            csch: SyCalc.csch,
            arcsinh: SyCalc.arcsinh,
            arccosh: SyCalc.arccosh,
            arctanh: SyCalc.arctanh,
            arccoth: SyCalc.arccoth,
            arcsech: SyCalc.arcsech,
            arccsch: SyCalc.arccsch,
            sqrt: Math.sqrt,
            log: Math.log10,
            ln: Math.log,
            abs: Math.abs,
            ceil: Math.ceil,
            floor: Math.floor,
            round: Math.round,
            "-": m,
            exp: Math.exp
        };
        this.ops2 = {
            "+": g,
            "-": u,
            "*": b,
            "/": L,
            "%": h,
            "^": Math.pow,
            ",": E,
            "||": x
        };
        this.functions = {
            random: w,
            fac: v,
            min: Math.min,
            max: Math.max,
            pyt: p,
            pow: Math.pow
        };
        this.consts = {
            e: Math.E,
            pi: Math.PI,
            "\u03c0": Math.PI
        }
    }
    f.parse = function(O) {
        return new f().parse(O)
    };
    f.evaluate = function(O, P) {
        return O.evaluate(P)
    };
    f.Expression = H;
    f.values = {
        sin: SyCalc.sin,
        cos: SyCalc.cos,
        tan: SyCalc.tan,
        cot: SyCalc.cot,
        csc: SyCalc.csc,
        sec: SyCalc.sec,
        arcsin: SyCalc.arcsin,
        arccos: SyCalc.arccos,
        arctan: SyCalc.arctan,
        arccot: SyCalc.arccot,
        arccsc: SyCalc.arccsc,
        arcsec: SyCalc.arcsec,
        sinh: SyCalc.sinh,
        cosh: SyCalc.cosh,
        tanh: SyCalc.tanh,
        coth: SyCalc.coth,
        csch: SyCalc.csch,
        sech: SyCalc.sech,
        arcsinh: SyCalc.arcsinh,
        arccosh: SyCalc.arccosh,
        arctanh: SyCalc.arctanh,
        arccoth: SyCalc.arccoth,
        arccsch: SyCalc.arccsch,
        arcsech: SyCalc.arcsech,
        sqrt: SyCalc.sqrt,
        log: Math.log10,
        ln: Math.log,
        abs: Math.abs,
        ceil: Math.ceil,
        floor: Math.floor,
        round: Math.round,
        random: w,
        fac: v,
        exp: Math.exp,
        min: Math.min,
        max: Math.max,
        pyt: p,
        pow: Math.pow,
        E: Math.E,
        PI: Math.PI
    };
    var M = 1 << 0;
    var J = 1 << 1;
    var a = 1 << 2;
    var l = 1 << 3;
    var o = 1 << 4;
    var q = 1 << 5;
    var y = 1 << 6;
    var r = 1 << 7;
    f.prototype = {
        parse: function(V) {
            this.errormsg = "";
            this.success = true;
            var Q = [];
            var W = [];
            this.tmpprio = 0;
            var S = (M | l | a | y);
            var T = 0;
            this.expression = V;
            this.pos = 0;
            while (this.pos < this.expression.length) {
                if (this.isOperator()) {
                    if (this.isSign() && (S & y)) {
                        if (this.isNegativeSign()) {
                            this.tokenprio = 2;
                            this.tokenindex = "-";
                            T++;
                            this.addfunc(W, Q, D)
                        }
                        S = (M | l | a | y)
                    } else {
                        if (this.isComment()) {} else {
                            if ((S & J) === 0) {
                                this.error_parsing(this.pos, "unexpected operator")
                            }
                            T += 2;
                            this.addfunc(W, Q, A);
                            S = (M | l | a | y)
                        }
                    }
                } else {
                    if (this.isNumber()) {
                        if ((S & M) === 0) {
                            this.error_parsing(this.pos, "unexpected number")
                        }
                        var P = new e(G, 0, 0, this.tokennumber);
                        W.push(P);
                        S = (J | o | q)
                    } else {
                        if (this.isString()) {
                            if ((S & M) === 0) {
                                this.error_parsing(this.pos, "unexpected string")
                            }
                            var P = new e(G, 0, 0, this.tokennumber);
                            W.push(P);
                            S = (J | o | q)
                        } else {
                            if (this.isLeftParenth()) {
                                if ((S & l) === 0) {
                                    this.error_parsing(this.pos, 'unexpected "("')
                                }
                                if (S & r) {
                                    T += 2;
                                    this.tokenprio = -2;
                                    this.tokenindex = -1;
                                    this.addfunc(W, Q, z)
                                }
                                S = (M | l | a | y)
                            } else {
                                if (this.isRightParenth()) {
                                    if ((S & o) === 0) {
                                        this.error_parsing(this.pos, 'unexpected ")"')
                                    }
                                    S = (J | o | q | l | r)
                                } else {
                                    if (this.isComma()) {
                                        if ((S & q) === 0) {
                                            this.error_parsing(this.pos, 'unexpected ","')
                                        }
                                        this.addfunc(W, Q, A);
                                        T += 2;
                                        S = (M | l | a | y)
                                    } else {
                                        if (this.isConst()) {
                                            if ((S & M) === 0) {
                                                this.error_parsing(this.pos, "unexpected constant")
                                            }
                                            var O = new e(G, 0, 0, this.tokennumber);
                                            W.push(O);
                                            S = (J | o | q)
                                        } else {
                                            if (this.isOp2()) {
                                                if ((S & a) === 0) {
                                                    this.error_parsing(this.pos, "unexpected function")
                                                }
                                                this.addfunc(W, Q, A);
                                                T += 2;
                                                S = (l)
                                            } else {
                                                if (this.isOp1()) {
                                                    if ((S & a) === 0) {
                                                        this.error_parsing(this.pos, "unexpected function")
                                                    }
                                                    this.addfunc(W, Q, D);
                                                    T++;
                                                    S = (l)
                                                } else {
                                                    if (this.isVar()) {
                                                        if ((S & M) === 0) {
                                                            this.error_parsing(this.pos, "unexpected variable")
                                                        }
                                                        var U = new e(t, this.tokenindex, 0, 0);
                                                        W.push(U);
                                                        S = (J | o | q | l | r)
                                                    } else {
                                                        if (this.isWhite()) {} else {
                                                            if (this.errormsg === "") {
                                                                this.error_parsing(this.pos, "unknown character")
                                                            } else {
                                                                this.error_parsing(this.pos, this.errormsg)
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (this.tmpprio < 0 || this.tmpprio >= 10) {
                this.error_parsing(this.pos, 'unmatched "()"')
            }
            while (Q.length > 0) {
                var R = Q.pop();
                W.push(R)
            }
            if (T + 1 !== W.length) {
                this.error_parsing(this.pos, V + ": parity " + T + 1 + ", " + W)
            }
            return new H(W, F(this.ops1), F(this.ops2), F(this.functions))
        },
        evaluate: function(O, P) {
            return this.parse(O).evaluate(P)
        },
        error_parsing: function(O, P) {
            this.success = false;
            this.errormsg = "parse error [column " + (O) + "]: " + P;
            throw new Error(this.errormsg)
        },
        addfunc: function(R, O, Q) {
            var P = new e(Q, this.tokenindex, this.tokenprio + this.tmpprio, 0);
            while (O.length > 0) {
                if (P.prio_ <= O[O.length - 1].prio_) {
                    R.push(O.pop())
                } else {
                    break
                }
            }
            O.push(P)
        },
        isNumber: function() {
            var P = false;
            var Q = "";
            while (this.pos < this.expression.length) {
                var O = this.expression.charCodeAt(this.pos);
                if ((O >= 48 && O <= 57) || O === 46) {
                    Q += this.expression.charAt(this.pos);
                    this.pos++;
                    this.tokennumber = parseFloat(Q);
                    P = true
                } else {
                    break
                }
            }
            return P
        },
        unescape: function(P, U) {
            var O = [];
            var T = false;
            for (var R = 0; R < P.length; R++) {
                var S = P.charAt(R);
                if (T) {
                    switch (S) {
                        case "'":
                            O.push("'");
                            break;
                        case "\\":
                            O.push("\\");
                            break;
                        case "/":
                            O.push("/");
                            break;
                        case "b":
                            O.push("\b");
                            break;
                        case "f":
                            O.push("\f");
                            break;
                        case "n":
                            O.push("\n");
                            break;
                        case "r":
                            O.push("\r");
                            break;
                        case "t":
                            O.push("\t");
                            break;
                        case "u":
                            var Q = parseInt(P.substring(R + 1, R + 5), 16);
                            O.push(String.fromCharCode(Q));
                            R += 4;
                            break;
                        default:
                            throw this.error_parsing(U + R, "Illegal escape sequence: '\\" + S + "'")
                    }
                    T = false
                } else {
                    if (S == "\\") {
                        T = true
                    } else {
                        O.push(S)
                    }
                }
            }
            return O.join("")
        },
        isString: function() {
            var P = false;
            var R = "";
            var Q = this.pos;
            if (this.pos < this.expression.length && this.expression.charAt(this.pos) == "'") {
                this.pos++;
                while (this.pos < this.expression.length) {
                    var O = this.expression.charAt(this.pos);
                    if (O != "'" || R.slice(-1) == "\\") {
                        R += this.expression.charAt(this.pos);
                        this.pos++
                    } else {
                        this.pos++;
                        this.tokennumber = this.unescape(R, Q);
                        P = true;
                        break
                    }
                }
            }
            return P
        },
        isConst: function() {
            var Q;
            for (var P in this.consts) {
                if (true) {
                    var O = P.length;
                    Q = this.expression.substr(this.pos, O);
                    if (P === Q) {
                        this.tokennumber = this.consts[P];
                        this.pos += O;
                        return true
                    }
                }
            }
            return false
        },
        isOperator: function() {
            var O = this.expression.charCodeAt(this.pos);
            if (O === 43) {
                this.tokenprio = 0;
                this.tokenindex = "+"
            } else {
                if (O === 45) {
                    this.tokenprio = 0;
                    this.tokenindex = "-"
                } else {
                    if (O === 124) {
                        if (this.expression.charCodeAt(this.pos + 1) === 124) {
                            this.pos++;
                            this.tokenprio = 0;
                            this.tokenindex = "||"
                        } else {
                            return false
                        }
                    } else {
                        if (O === 42) {
                            this.tokenprio = 1;
                            this.tokenindex = "*"
                        } else {
                            if (O === 47) {
                                this.tokenprio = 2;
                                this.tokenindex = "/"
                            } else {
                                if (O === 37) {
                                    this.tokenprio = 2;
                                    this.tokenindex = "%"
                                } else {
                                    if (O === 94) {
                                        this.tokenprio = 3;
                                        this.tokenindex = "^"
                                    } else {
                                        return false
                                    }
                                }
                            }
                        }
                    }
                }
            }
            this.pos++;
            return true
        },
        isSign: function() {
            var O = this.expression.charCodeAt(this.pos - 1);
            if (O === 45 || O === 43) {
                return true
            }
            return false
        },
        isPositiveSign: function() {
            var O = this.expression.charCodeAt(this.pos - 1);
            if (O === 43) {
                return true
            }
            return false
        },
        isNegativeSign: function() {
            var O = this.expression.charCodeAt(this.pos - 1);
            if (O === 45) {
                return true
            }
            return false
        },
        isLeftParenth: function() {
            var O = this.expression.charCodeAt(this.pos);
            if (O === 40) {
                this.pos++;
                this.tmpprio += 10;
                return true
            }
            return false
        },
        isRightParenth: function() {
            var O = this.expression.charCodeAt(this.pos);
            if (O === 41) {
                this.pos++;
                this.tmpprio -= 10;
                return true
            }
            return false
        },
        isComma: function() {
            var O = this.expression.charCodeAt(this.pos);
            if (O === 44) {
                this.pos++;
                this.tokenprio = -1;
                this.tokenindex = ",";
                return true
            }
            return false
        },
        isWhite: function() {
            var O = this.expression.charCodeAt(this.pos);
            if (O === 32 || O === 9 || O === 10 || O === 13) {
                this.pos++;
                return true
            }
            return false
        },
        isOp1: function() {
            var P = "";
            for (var O = this.pos; O < this.expression.length; O++) {
                var Q = this.expression.charAt(O);
                if (Q.toUpperCase() === Q.toLowerCase()) {
                    if (O === this.pos || Q < "0" || Q > "9") {
                        break
                    }
                }
                P += Q
            }
            if (P.length > 0 && (P in this.ops1)) {
                this.tokenindex = P;
                this.tokenprio = 5;
                this.pos += P.length;
                return true
            }
            return false
        },
        isOp2: function() {
            var P = "";
            for (var O = this.pos; O < this.expression.length; O++) {
                var Q = this.expression.charAt(O);
                if (Q.toUpperCase() === Q.toLowerCase()) {
                    if (O === this.pos || Q < "0" || Q > "9") {
                        break
                    }
                }
                P += Q
            }
            if (P.length > 0 && (P in this.ops2)) {
                this.tokenindex = P;
                this.tokenprio = 5;
                this.pos += P.length;
                return true
            }
            return false
        },
        isVar: function() {
            var P = "";
            for (var O = this.pos; O < this.expression.length; O++) {
                var Q = this.expression.charAt(O);
                if (Q.toUpperCase() === Q.toLowerCase()) {
                    if (O === this.pos || Q < "0" || Q > "9") {
                        break
                    }
                }
                P += Q
            }
            if (P.length > 0) {
                this.tokenindex = P;
                this.tokenprio = 4;
                this.pos += P.length;
                return true
            }
            return false
        },
        isComment: function() {
            var O = this.expression.charCodeAt(this.pos - 1);
            if (O === 47 && this.expression.charCodeAt(this.pos) === 42) {
                this.pos = this.expression.indexOf("*/", this.pos) + 2;
                if (this.pos === 1) {
                    this.pos = this.expression.length
                }
                return true
            }
            return false
        }
    };
    B.Parser = f;
    return f
})(typeof exports === "undefined" ? {} : exports);
var SyNumberLine = function(a, f, e, b) {
    this.valid = true;
    this.numberLineInfo = e;
    this.inStepImageUrl = b;
    this.targetElement = a;
    this.elementsToHide = f;
    if (b) {
        this.width = a.width();
        this.drawInStepImage()
    } else {
        if (!e || !e.imageAPI) {
            this.valid = false;
            return
        }
        this.width = a.width() - 20;
        this.drawNumberLine()
    }
};
SyNumberLine.fromNumberLineInfo = function(a, e, b) {
    return new SyNumberLine(a, e, b, undefined)
};
SyNumberLine.fromInStepImageUrl = function(a, e, b) {
    return new SyNumberLine(a, e, undefined, b)
};
SyNumberLine.prototype = {
    drawNumberLine: function() {
        var n = this;
        var l = window.devicePixelRatio;
        var m = l * n.width;
        var o = 100 / l;
        var b = n.numberLineInfo.imageAPI + "&width=" + m;
        if (n.numberLineInfo.animatedImageAPI) {
            b = n.numberLineInfo.animatedImageAPI + "&width=" + m
        }
        var a = -48;
        if (o > 50) {
            a = -75
        }
        var h = $("<img/>", {
            css: {
                width: n.width,
                padding: "10px",
                margin: "auto",
                display: "block"
            }
        });
        h.hide();
        var j = $("#numberLineLoader");
        j.css("margin-top", a + "px");
        n.targetElement.append(h);
        h.hide();
        var f = $("#empty_number_line_img img", {
            css: {
                margin: "auto",
                display: "block"
            }
        });
        var g = b.replace("numberLineAddSubtractAnimated", "emptyNumberLineAddSubtract");
        ajaxImage(g, f, n.elementsToHide).then(function(p) {});
        var e = $("#playStopGifBtn");
        ajaxImage(b, h, n.elementsToHide).then(function(p) {
            h.show();
            if (p.type === "image/gif") {
                $("#numberLineLoader").hide();
                $("#empty_number_line_img").hide();
                $("#numberLineLoader img").remove();
                $("#empty_number_line_img img").remove();
                e.addClass("nl-show");
                e.addClass("play_icon");
                e.click(function(q) {
                    if (e.hasClass("play_icon") || e.hasClass("replay")) {
                        e.removeClass("play_icon");
                        e.addClass("replay");
                        n.restartNumberLine(q)
                    }
                })
            } else {
                $("#numberLineLoader").hide();
                $("#empty_number_line_img").hide()
            }
        })
    },
    restartNumberLine: function(b) {
        var a = $("#numberLine img");
        var e = a.attr("src");
        b.preventDefault();
        a.attr("src", "");
        a.attr("src", e)
    },
    drawInStepImage: function() {
        var q = this;
        var n = window.devicePixelRatio;
        var p = n * q.width;
        var r = 100 / n;
        var b = q.inStepImageUrl + "&width=" + p + "&ratio=" + n;
        var a = -48;
        if (r > 50) {
            a = -75
        }
        var f = $("<a />", {
            "class": "playStopGifBtn"
        });
        q.targetElement.append(f);
        var m = $("<div />", {
            "class": "solution_box",
            css: {
                "margin-left": "0px",
                border: "none"
            }
        });
        q.targetElement.append(m);
        var e = $("<img />", {
            css: {
                width: q.width,
                margin: "auto",
                display: "block"
            }
        });
        var o = $("<div>", {
            "class": "empty_number_line_img",
            css: {
                "padding-left": "0px",
                "padding-right": "0px"
            }
        });
        o.append(e);
        m.append(o);
        var h = $("<img />", {
            src: "/public/img/ajax-loader.gif"
        });
        var l = $("<div>", {
            "class": "numberLineLoader",
            css: {
                "margin-left": (q.width / 2 - 16) + "px"
            }
        }).append(h);
        m.append(l);
        var j = $("<img/>", {
            css: {
                width: q.width,
                "padding-top": "10px",
                "padding-bottom": "10px",
                margin: "auto",
                display: "block"
            }
        });
        j.hide();
        l.css("margin-top", a + "px");
        q.targetElement.append(j);
        j.hide();
        var g = b.replace("numberLineAddSubtractAnimated", "emptyNumberLineAddSubtract").replace("multiply", "emptyMultiply");
        ajaxImage(g, e, q.elementsToHide).then(function(s) {
            e.css("width", (e[0].naturalWidth / n) + "px")
        });
        ajaxImage(b, j, q.elementsToHide).then(function(s) {
            l.hide();
            o.hide();
            j.css("width", (j[0].naturalWidth / n) + "px");
            if (s.type === "image/gif") {
                f.addClass("nl-show");
                f.addClass("play_icon");
                f.on("click", function(t) {
                    if (f.hasClass("play_icon") || f.hasClass("replay")) {
                        f.removeClass("play_icon");
                        f.addClass("replay");
                        q.restartNumberLineInStep(t, j)
                    }
                })
            }
            j.show();
            h.remove();
            e.remove()
        })
    },
    restartNumberLineInStep: function(b, a) {
        var e = a.attr("src");
        b.preventDefault();
        a.attr("src", "");
        a.attr("src", e)
    }
};

function SyPlotSettingsInfo() {
    this.isDrawFunctionIntercepts = {
        draw: false,
        possible: false
    };
    this.isDrawAxisIntercepts = {
        draw: false,
        possible: true
    };
    this.isDrawExtreme = {
        draw: false,
        possible: true
    };
    this.isDrawAsypmtotes = {
        draw: false,
        possible: false
    };
    this.xLabel = "";
    this.x1 = 0;
    this.x2 = 0;
    this.yLabel = "";
    this.y1 = 0;
    this.y2 = 0
}

function SyPlotSettingsHolder() {
    this.defaultSettings = new SyPlotSettingsInfo();
    this.userSettings;
    this.tempSettings;
    this.hideHomeCallback = null;
    this.showHomeCallback = null;
    this.updateSettingsCallback = null;
    this.logActivityType = "GraphingCalculator"
}
SyPlotSettingsHolder.prototype = {
    cur: function() {
        if (this.tempSettings) {
            return this.tempSettings
        } else {
            if (this.userSettings) {
                return this.userSettings
            } else {
                return this.defaultSettings
            }
        }
    },
    hasUserSettings: function() {
        return this.userSettings != null
    },
    createUserSettings: function() {
        var a = this;
        a.userSettings = jQuery.extend(true, {}, a.cur());
        a.tempSettings = null;
        a.updateSettingsFromHTML();
        a.notifyUpdatedUserSettings(false)
    },
    init: function(f, b, h) {
        var e = this;
        e.syPlot = b;
        if (h) {
            e.userSettings = null;
            e.tempSettings = null
        }
        e.defaultSettings = new SyPlotSettingsInfo();
        $("#canvasZoom").remove();
        e.canvasZoom = $("<div id='canvasZoom' class='no-select'></div>").insertAfter(b.graphJQ);
        if (f.showPoints) {
            sy_graphSettings.defaultSettings.isDrawAxisIntercepts.draw = true;
            sy_graphSettings.defaultSettings.isDrawExtreme.draw = true
        }
        if (f.showSettings) {
            var a = $("#settingsBoxTemplate").clone();
            a.find("*[id]").each(function(l, m) {
                $(m).attr("id", $(m).attr("id").replace("_", ""))
            });
            e.canvasZoom.append(a.html());
            this.settingsContainerJQ = $("#settingsContainer");
            this.settingsJQ = $("#canvasSettings").parent();
            this.settingsJQ.unbind("click").click(function() {
                e.toggleSettings()
            })
        }
        if (f.showZoom) {
            this.canvasZoom.append('<div><img alt="zoom in" id="zoomIn" src="/public/img/plus.png"></div><div><img alt="zoom out" id="zoomOut" src="/public/img/minus.png"></div><div><img alt="graph reset" id="graphReset" src="/public/images/home.png"></div>')
        }
        e.defaultSettings.isDrawAsypmtotes.draw = false;
        e.defaultSettings.isDrawAsypmtotes.possible = false;
        if (b.plotInfo && b.plotInfo.funcsToDraw) {
            for (var g in b.plotInfo.funcsToDraw.funcs) {
                if (b.plotInfo.funcsToDraw.funcs[g].attributes.isAsymptote) {
                    e.defaultSettings.isDrawAsypmtotes.draw = true;
                    e.defaultSettings.isDrawAsypmtotes.possible = true
                }
            }
        }
        if (e.userSettings) {
            e.userSettings.isDrawAsypmtotes.possible = e.defaultSettings.isDrawAsypmtotes.possible
        }
        if (e.tempSettings) {
            e.tempSettings.isDrawAsypmtotes.possible = e.defaultSettings.isDrawAsypmtotes.possible
        }
        var j = e.getNonAsymptoteFunctions() > 1;
        e.defaultSettings.isDrawFunctionIntercepts.possible = j;
        if (e.userSettings) {
            e.userSettings.isDrawFunctionIntercepts.possible = j
        }
        if (e.tempSettings) {
            e.tempSettings.isDrawFunctionIntercepts.possible = j
        }
        $(".rangeSelect").unbind("keyup").keyup(function() {
            e.createUserSettings();
            e.syPlot.draw(true);
            if ($(this).attr("id").includes("x")) {
                symbolab_log(e.logActivityType, "Settings", "XRange")
            } else {
                symbolab_log(e.logActivityType, "Settings", "YRange")
            }
        });
        $("#xLabel, #yLabel").unbind("keyup").keyup(function() {
            e.createUserSettings();
            e.syPlot.draw(true);
            if ($(this).attr("id").includes("x")) {
                symbolab_log(e.logActivityType, "Settings", "XLabel")
            } else {
                symbolab_log(e.logActivityType, "Settings", "YLabel")
            }
        });
        $("#asymCheck").unbind("click").click(function() {
            e.createUserSettings();
            e.syPlot.draw(true);
            e.logChecked(this, "Asymptotes");
            e.notifyUpdatedUserSettings(false)
        });
        $("#extCheck").unbind("click").click(function() {
            e.createUserSettings();
            e.syPlot.draw(true);
            e.logChecked(this, "Extremes");
            e.notifyUpdatedUserSettings(false)
        });
        $("#axisCheck").unbind("click").click(function() {
            e.createUserSettings();
            e.syPlot.draw(true);
            e.logChecked(this, "AxisIntercepts");
            e.notifyUpdatedUserSettings(false)
        });
        $("#funcCheck").unbind("click").click(function() {
            e.createUserSettings();
            e.syPlot.draw(true);
            e.logChecked(this, "FunctionIntercepts");
            e.notifyUpdatedUserSettings(false)
        });
        $("#resetSettingsBtn").unbind("click").click(function() {
            e.tempSettings = null;
            e.userSettings = null;
            e.hideHomeButton();
            symbolab_log(e.logActivityType, "Settings", "Reset");
            $("#settingsContainer").fadeOut("fast");
            e.syPlot.draw(true);
            e.notifyUpdatedUserSettings(false);
            symbolab_log("GraphingCalculator", "Settings", "Reset")
        });
        $("#zoomIn").parent().unbind("click").click(function() {
            e.syPlot.zoomIn();
            e.syPlot.donePanning()
        });
        $("#zoomOut").parent().unbind("click").click(function() {
            e.syPlot.zoomOut();
            e.syPlot.donePanning()
        });
        if (window.location.href.indexOf("/graphing-calculator") >= 0) {
            e.syPlot.graphJQ.unbind("mousewheel").mousewheel(function(l, m) {
                clearTimeout($.data(this, "timer"));
                $.data(this, "timer", setTimeout(function() {
                    e.syPlot.donePanning()
                }, 50));
                if (m > 0) {
                    e.syPlot.zoomIn(l)
                } else {
                    e.syPlot.zoomOut(l)
                }
            })
        }
        $("#graphReset").parent().unbind("click").click(function() {
            e.homeClicked();
            symbolab_log("GraphingCalculator", "Zoom", "Home")
        });
        e.notifyUpdatedUserSettings(true)
    },
    homeClicked: function() {
        var a = this;
        a.tempSettings = null;
        a.hideHomeButton();
        a.closeSettings();
        a.syPlot.draw(true);
        symbolab_log(a.logActivityType, "Settings", "Home")
    },
    hideHomeButton: function() {
        var a = this;
        $("#graphReset").fadeOut("fast");
        if (a.hideHomeCallback) {
            a.hideHomeCallback()
        }
    },
    showHomeButton: function() {
        var a = this;
        $("#graphReset").fadeIn("fast");
        if (a.showHomeCallback) {
            a.showHomeCallback()
        }
    },
    settingsOpen: function() {
        var a = $("#settingsContainer");
        return a.is(":visible")
    },
    toggleSettings: function() {
        var b = this;
        var a = $("#settingsContainer");
        if (b.settingsOpen()) {
            symbolab_log("GraphingCalculator", "Settings", "Close")
        } else {
            this.updateHTMLFromSettings();
            symbolab_log("GraphingCalculator", "Settings", "Open")
        }
        a.fadeToggle("fast")
    },
    closeSettings: function() {
        var b = this;
        var a = $("#settingsContainer");
        if (b.settingsOpen()) {
            a.fadeOut("fast");
            symbolab_log(b.logActivityType, "Settings", "Close")
        }
    },
    logChecked: function(e, a) {
        var b = this;
        if ($(e).find("input").is(":checked")) {
            symbolab_log(b.logActivityType, a, "On")
        } else {
            symbolab_log(b.logActivityType, a, "Off")
        }
    },
    updateCoordinates: function() {
        this.tempSettings = jQuery.extend(true, {}, this.cur());
        this.cur().x1 = this.syPlot.currCoord.x1.toFixed(2);
        this.cur().x2 = this.syPlot.currCoord.x2.toFixed(2);
        this.cur().y1 = this.syPlot.currCoord.y1.toFixed(2);
        this.cur().y2 = this.syPlot.currCoord.y2.toFixed(2)
    },
    updateSettingsFromHTML: function() {
        this.cur().x1 = $("#x1").val();
        this.cur().x2 = $("#x2").val();
        this.cur().y1 = $("#y1").val();
        this.cur().y2 = $("#y2").val();
        this.cur().xLabel = $("#xLabel").val();
        this.cur().yLabel = $("#yLabel").val();
        this.cur().isDrawAsypmtotes.draw = $("#asymCheck input").is(":checked");
        this.cur().isDrawExtreme.draw = $("#extCheck input").is(":checked");
        this.cur().isDrawAxisIntercepts.draw = $("#axisCheck input").is(":checked");
        this.cur().isDrawFunctionIntercepts.draw = $("#funcCheck input").is(":checked");
        if (this.tempSettings == null) {
            this.hideHomeButton()
        }
    },
    notifyUpdatedUserSettings: function(a) {
        if (this.updateSettingsCallback) {
            this.updateSettingsCallback(a)
        }
    },
    adjustCheck: function(a, b) {
        if (a.possible == false) {
            $(b).hide()
        } else {
            $(b).show();
            $(b).find("input").attr("checked", a.draw);
            $(b + " input").removeAttr("disabled");
            $(b).css("color", "")
        }
    },
    updateHTMLFromSettings: function() {
        var a = this;
        $("#x1").val(a.cur().x1);
        $("#x2").val(a.cur().x2);
        $("#y1").val(a.cur().y1);
        $("#y2").val(a.cur().y2);
        $("#xLabel").val(a.cur().xLabel);
        $("#yLabel").val(a.cur().yLabel);
        a.adjustCheck(a.cur().isDrawFunctionIntercepts, "#funcCheck");
        a.adjustCheck(a.cur().isDrawAxisIntercepts, "#axisCheck");
        a.adjustCheck(a.cur().isDrawExtreme, "#extCheck");
        a.adjustCheck(a.cur().isDrawAsypmtotes, "#asymCheck");
        $("#graphSettingSections hr, #graphSettingSections label").show();
        if (a.cur().isDrawFunctionIntercepts.possible == false && a.cur().isDrawAxisIntercepts.possible == false && a.cur().isDrawExtreme.possible == false && a.cur().isDrawAsypmtotes.possible == false) {
            $("#graphSettingSections .settingsDivider, #graphSettingSections label").hide()
        }
    },
    isFunctionIntercepts: function() {
        var a = this;
        var b = a.cur().isDrawFunctionIntercepts.possible;
        return b
    },
    getNonAsymptoteFunctions: function() {
        var a = this;
        var e = 0;
        if (a.syPlot.plotInfo && a.syPlot.plotInfo.funcsToDraw && a.syPlot.plotInfo.funcsToDraw.funcs) {
            for (var b = 0; b < a.syPlot.plotInfo.funcsToDraw.funcs.length; b++) {
                if (a.syPlot.plotInfo.funcsToDraw.funcs[b].attributes.isAsymptote) {
                    continue
                }
                e++
            }
        }
        return e
    },
    loadSettingsFromJson: function(b) {
        var a = this;
        a.tempSettings = null;
        a.userSettings = jQuery.extend(true, {}, a.defaultSettings);
        a.cur().xLabel = b.graph.xAxis.label;
        a.cur().x1 = b.graph.xAxis.min;
        a.cur().x2 = b.graph.xAxis.max;
        a.cur().yLabel = b.graph.yAxis.label;
        a.cur().y1 = b.graph.yAxis.min;
        a.cur().y2 = b.graph.yAxis.max;
        b.graph.graphSettings.forEach(function(f, e) {
            $("#" + f.fst + " input").attr("checked", f.snd == "checked" ? "checked" : false)
        });
        a.cur().isDrawAsypmtotes.draw = $("#asymCheck input").is(":checked");
        a.cur().isDrawExtreme.draw = $("#extCheck input").is(":checked");
        a.cur().isDrawAxisIntercepts.draw = $("#axisCheck input").is(":checked");
        a.cur().isDrawFunctionIntercepts.draw = $("#funcCheck input").is(":checked");
        if (a.syPlot) {
            a.syPlot.draw(true)
        }
    },
    outputGraphSettings: function() {
        var a = this;
        var b = [{
            fst: "asymCheck",
            snd: a.cur().isDrawAsypmtotes.draw ? "checked" : "false"
        }, {
            fst: "extCheck",
            snd: a.cur().isDrawExtreme.draw ? "checked" : "false"
        }, {
            fst: "axisCheck",
            snd: a.cur().isDrawAxisIntercepts.draw ? "checked" : "false"
        }, {
            fst: "funcCheck",
            snd: a.cur().isDrawFunctionIntercepts.draw ? "checked" : "false"
        }];
        return b
    }
};
var sy_graphSettings = new SyPlotSettingsHolder();